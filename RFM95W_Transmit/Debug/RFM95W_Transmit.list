
RFM95W_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d58  08003d58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d60  08003d60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08003dd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003dd8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a813  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a45  00000000  00000000  0002a8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002cc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001663b  00000000  00000000  0002d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a82  00000000  00000000  00043afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a2b  00000000  00000000  0004d57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6fa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002934  00000000  00000000  000d6ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003cd8 	.word	0x08003cd8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003cd8 	.word	0x08003cd8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <RFM95_setNSSPin>:
#include <stdio.h>
#include <math.h>
#include "rfm95.h"
/* Export functions */
static inline void RFM95_setNSSPin(RFM95_HandleTypeDef *const me)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d008      	beq.n	80004a4 <RFM95_setNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_SET);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	8bdb      	ldrh	r3, [r3, #30]
 800049a:	2201      	movs	r2, #1
 800049c:	4619      	mov	r1, r3
 800049e:	f001 faff 	bl	8001aa0 <HAL_GPIO_WritePin>
 80004a2:	e000      	b.n	80004a6 <RFM95_setNSSPin+0x22>
		return;
 80004a4:	bf00      	nop
}
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <RFM95_clearNSSPin>:

static inline void RFM95_clearNSSPin(RFM95_HandleTypeDef *const me)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d008      	beq.n	80004cc <RFM95_clearNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_RESET);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	8bdb      	ldrh	r3, [r3, #30]
 80004c2:	2200      	movs	r2, #0
 80004c4:	4619      	mov	r1, r3
 80004c6:	f001 faeb 	bl	8001aa0 <HAL_GPIO_WritePin>
 80004ca:	e000      	b.n	80004ce <RFM95_clearNSSPin+0x22>
		return;
 80004cc:	bf00      	nop
}
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <RFM95_writeRegister>:

static THT_StatusTypeDef RFM95_writeRegister(RFM95_HandleTypeDef *const me,
		uint8_t address, uint8_t data)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
 80004e0:	4613      	mov	r3, r2
 80004e2:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d101      	bne.n	80004ee <RFM95_writeRegister+0x1a>
	{
		return THT_ERROR;
 80004ea:	2301      	movs	r3, #1
 80004ec:	e021      	b.n	8000532 <RFM95_writeRegister+0x5e>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f7ff ffdc 	bl	80004ac <RFM95_clearNSSPin>
	/* an address byte followed by a data byte is sent for a write access */
	uint8_t txBuffer[2] = { address | 0x80, data };
 80004f4:	78fb      	ldrb	r3, [r7, #3]
 80004f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	733b      	strb	r3, [r7, #12]
 80004fe:	78bb      	ldrb	r3, [r7, #2]
 8000500:	737b      	strb	r3, [r7, #13]
//	printf("Write %X to address %x\n", txBuffer[1], txBuffer[0]);
	HAL_StatusTypeDef res = HAL_SPI_Transmit(me->hspi, txBuffer, 2, 100);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6998      	ldr	r0, [r3, #24]
 8000506:	f107 010c 	add.w	r1, r7, #12
 800050a:	2364      	movs	r3, #100	; 0x64
 800050c:	2202      	movs	r2, #2
 800050e:	f002 f926 	bl	800275e <HAL_SPI_Transmit>
 8000512:	4603      	mov	r3, r0
 8000514:	73fb      	strb	r3, [r7, #15]
	/* The NSS pin goes high after the data byte. b*/
	RFM95_setNSSPin(me);
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ffb4 	bl	8000484 <RFM95_setNSSPin>

	if (res == HAL_OK)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d101      	bne.n	8000526 <RFM95_writeRegister+0x52>
	{
		return THT_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	e005      	b.n	8000532 <RFM95_writeRegister+0x5e>
	}
	else if (res == HAL_ERROR)
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d101      	bne.n	8000530 <RFM95_writeRegister+0x5c>
	{
		return THT_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	e000      	b.n	8000532 <RFM95_writeRegister+0x5e>
	}
	else
	{
		return THT_TIMEOUT;
 8000530:	2303      	movs	r3, #3
	}
}
 8000532:	4618      	mov	r0, r3
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <RFM95_writeBurstRegister>:

static THT_StatusTypeDef RFM95_writeBurstRegister(RFM95_HandleTypeDef *const me,
		uint8_t address, uint8_t *pData, uint8_t size)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b086      	sub	sp, #24
 800053e:	af00      	add	r7, sp, #0
 8000540:	60f8      	str	r0, [r7, #12]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	461a      	mov	r2, r3
 8000546:	460b      	mov	r3, r1
 8000548:	72fb      	strb	r3, [r7, #11]
 800054a:	4613      	mov	r3, r2
 800054c:	72bb      	strb	r3, [r7, #10]
	if (me == NULL)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d101      	bne.n	8000558 <RFM95_writeBurstRegister+0x1e>
	{
		return THT_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	e041      	b.n	80005dc <RFM95_writeBurstRegister+0xa2>
	}

	HAL_StatusTypeDef res = HAL_OK;
 8000558:	2300      	movs	r3, #0
 800055a:	75fb      	strb	r3, [r7, #23]

	if (size == 1)
 800055c:	7abb      	ldrb	r3, [r7, #10]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d109      	bne.n	8000576 <RFM95_writeBurstRegister+0x3c>
	{
		res = RFM95_writeRegister(me, address, *pData);
 8000562:	7af9      	ldrb	r1, [r7, #11]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f7ff ffb2 	bl	80004d4 <RFM95_writeRegister>
 8000570:	4603      	mov	r3, r0
 8000572:	75fb      	strb	r3, [r7, #23]
 8000574:	e031      	b.n	80005da <RFM95_writeBurstRegister+0xa0>
	}
	else
	{
		RFM95_clearNSSPin(me);
 8000576:	68f8      	ldr	r0, [r7, #12]
 8000578:	f7ff ff98 	bl	80004ac <RFM95_clearNSSPin>

		address |= 0x80;
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000582:	b2db      	uxtb	r3, r3
 8000584:	72fb      	strb	r3, [r7, #11]

		res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6998      	ldr	r0, [r3, #24]
 800058a:	f107 010b 	add.w	r1, r7, #11
 800058e:	2364      	movs	r3, #100	; 0x64
 8000590:	2201      	movs	r2, #1
 8000592:	f002 f8e4 	bl	800275e <HAL_SPI_Transmit>
 8000596:	4603      	mov	r3, r0
 8000598:	75fb      	strb	r3, [r7, #23]
		if (res == HAL_OK)
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d119      	bne.n	80005d4 <RFM95_writeBurstRegister+0x9a>
		{
			for (size_t i = 0; i < size; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	e010      	b.n	80005c8 <RFM95_writeBurstRegister+0x8e>
			{
//				printf("Write %X to address %x\n", *pData, address);
				res = HAL_SPI_Transmit(me->hspi, pData++, 1, 100);    //pdata++
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6998      	ldr	r0, [r3, #24]
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	1c4b      	adds	r3, r1, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	2364      	movs	r3, #100	; 0x64
 80005b2:	2201      	movs	r2, #1
 80005b4:	f002 f8d3 	bl	800275e <HAL_SPI_Transmit>
 80005b8:	4603      	mov	r3, r0
 80005ba:	75fb      	strb	r3, [r7, #23]

				if (res != HAL_OK)
 80005bc:	7dfb      	ldrb	r3, [r7, #23]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d107      	bne.n	80005d2 <RFM95_writeBurstRegister+0x98>
			for (size_t i = 0; i < size; i++)
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	3301      	adds	r3, #1
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	7abb      	ldrb	r3, [r7, #10]
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d3ea      	bcc.n	80005a6 <RFM95_writeBurstRegister+0x6c>
 80005d0:	e000      	b.n	80005d4 <RFM95_writeBurstRegister+0x9a>
				{
					break;
 80005d2:	bf00      	nop
				}
			}
		}

		RFM95_setNSSPin(me);
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f7ff ff55 	bl	8000484 <RFM95_setNSSPin>
	}

	return res;
 80005da:	7dfb      	ldrb	r3, [r7, #23]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <RFM95_readRegister>:

static THT_StatusTypeDef RFM95_readRegister(RFM95_HandleTypeDef *const me,
		uint8_t address, uint8_t *value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	460b      	mov	r3, r1
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	72fb      	strb	r3, [r7, #11]
	if (me == NULL)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <RFM95_readRegister+0x18>
	{
		return THT_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e025      	b.n	8000648 <RFM95_readRegister+0x64>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f7ff ff55 	bl	80004ac <RFM95_clearNSSPin>

	HAL_StatusTypeDef res = HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	75fb      	strb	r3, [r7, #23]

	/* an address byte is sent */
	res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6998      	ldr	r0, [r3, #24]
 800060a:	f107 010b 	add.w	r1, r7, #11
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	2201      	movs	r2, #1
 8000612:	f002 f8a4 	bl	800275e <HAL_SPI_Transmit>
 8000616:	4603      	mov	r3, r0
 8000618:	75fb      	strb	r3, [r7, #23]
	/* and a read byte is received for the read access. */
	res = HAL_SPI_Receive(me->hspi, value, 1, 100);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6998      	ldr	r0, [r3, #24]
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	2201      	movs	r2, #1
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f002 f9d7 	bl	80029d6 <HAL_SPI_Receive>
 8000628:	4603      	mov	r3, r0
 800062a:	75fb      	strb	r3, [r7, #23]

	/* The NSS pin goes high after the data byte. b*/
	RFM95_setNSSPin(me);
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f7ff ff29 	bl	8000484 <RFM95_setNSSPin>
//	printf("Read address %x: %x\n ", address, *value);
	if (res == HAL_OK)
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <RFM95_readRegister+0x58>
	{
		return THT_OK;
 8000638:	2300      	movs	r3, #0
 800063a:	e005      	b.n	8000648 <RFM95_readRegister+0x64>
	}
	else if (res == HAL_ERROR)
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d101      	bne.n	8000646 <RFM95_readRegister+0x62>
	{
		return THT_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <RFM95_readRegister+0x64>
	}
	else
	{
		return THT_TIMEOUT;
 8000646:	2303      	movs	r3, #3
	}
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <RFM95_setHeaderMode>:
 * @arg RFLR_MODEMCONFIG1_IMPLICITHEADER_OFF        0x00 // Default
 */

THT_StatusTypeDef RFM95_setHeaderMode(RFM95_HandleTypeDef *const me,
		uint8_t headerMode)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d101      	bne.n	8000666 <RFM95_setHeaderMode+0x16>
	{
		return THT_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e024      	b.n	80006b0 <RFM95_setHeaderMode+0x60>
	}

	uint8_t rByte = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 800066e:	f107 030d 	add.w	r3, r7, #13
 8000672:	461a      	mov	r2, r3
 8000674:	211d      	movs	r1, #29
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff ffb4 	bl	80005e4 <RFM95_readRegister>
 800067c:	4603      	mov	r3, r0
 800067e:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <RFM95_setHeaderMode+0x3a>
	{
		return res;
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	e012      	b.n	80006b0 <RFM95_setHeaderMode+0x60>
	}

	/* Set the new value of REG_LR_MODEMCONFIG1 register */
	wByte = (uint8_t) (headerMode
			| (rByte & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK));
 800068a:	7b7b      	ldrb	r3, [r7, #13]
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	b25a      	sxtb	r2, r3
 8000694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000698:	4313      	orrs	r3, r2
 800069a:	b25b      	sxtb	r3, r3
	wByte = (uint8_t) (headerMode
 800069c:	73fb      	strb	r3, [r7, #15]

	/* Write new value to REG_LR_MODEMCONFIG2 register */
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	461a      	mov	r2, r3
 80006a2:	211d      	movs	r1, #29
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ff15 	bl	80004d4 <RFM95_writeRegister>
 80006aa:	4603      	mov	r3, r0
 80006ac:	73bb      	strb	r3, [r7, #14]

	return res;
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <RFM95_setSpreadingFactor>:
 @arg RFLR_MODEMCONFIG2_SF_11                     0xB0
 @arg RFLR_MODEMCONFIG2_SF_12                     0xC0
 */
THT_StatusTypeDef RFM95_setSpreadingFactor(RFM95_HandleTypeDef *const me,
		uint8_t SF)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <RFM95_setSpreadingFactor+0x16>
	{
		return THT_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e09f      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
	}

	me->parent.SF = SF >> 4u;
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	091b      	lsrs	r3, r3, #4
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	711a      	strb	r2, [r3, #4]

	uint8_t rByte = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 80006e0:	f107 030d 	add.w	r3, r7, #13
 80006e4:	461a      	mov	r2, r3
 80006e6:	211e      	movs	r1, #30
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff7b 	bl	80005e4 <RFM95_readRegister>
 80006ee:	4603      	mov	r3, r0
 80006f0:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <RFM95_setSpreadingFactor+0x44>
	{
		return THT_ERROR;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e088      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
	}

	/* SF = 6 Is a special use case for the highest data rate transmission possible with the LoRa modem */
	if (SF == RFLR_MODEMCONFIG2_SF_6)
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	2b60      	cmp	r3, #96	; 0x60
 8000700:	d144      	bne.n	800078c <RFM95_setSpreadingFactor+0xd4>
	{
		/* Set the new value of REG_LR_MODEMCONFIG2 register */
		wByte = (uint8_t) (RFLR_MODEMCONFIG2_SF_6
				| (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 8000702:	7b7b      	ldrb	r3, [r7, #13]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	b25b      	sxtb	r3, r3
 800070c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000710:	b25b      	sxtb	r3, r3
		wByte = (uint8_t) (RFLR_MODEMCONFIG2_SF_6
 8000712:	73fb      	strb	r3, [r7, #15]

		/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
		res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	461a      	mov	r2, r3
 8000718:	211e      	movs	r1, #30
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff feda 	bl	80004d4 <RFM95_writeRegister>
 8000720:	4603      	mov	r3, r0
 8000722:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 8000724:	7bbb      	ldrb	r3, [r7, #14]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <RFM95_setSpreadingFactor+0x76>
		{
			return res;
 800072a:	7bbb      	ldrb	r3, [r7, #14]
 800072c:	e06f      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
		}

		/* 2. Set the header to implicit mode */
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 800072e:	2101      	movs	r1, #1
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff8d 	bl	8000650 <RFM95_setHeaderMode>

		/* 3. Write bit 2-0 of register 0x31 to value "0b101" */
		res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8000736:	f107 030d 	add.w	r3, r7, #13
 800073a:	461a      	mov	r2, r3
 800073c:	2131      	movs	r1, #49	; 0x31
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff50 	bl	80005e4 <RFM95_readRegister>
 8000744:	4603      	mov	r3, r0
 8000746:	73bb      	strb	r3, [r7, #14]
		if (res != THT_OK)
 8000748:	7bbb      	ldrb	r3, [r7, #14]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <RFM95_setSpreadingFactor+0x9a>
		{
			return THT_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e05d      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
		}

		wByte = (uint8_t) (RFLR_DETECTIONOPTIMIZE_SF6
				| (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 8000752:	7b7b      	ldrb	r3, [r7, #13]
 8000754:	b25b      	sxtb	r3, r3
 8000756:	f023 0307 	bic.w	r3, r3, #7
 800075a:	b25b      	sxtb	r3, r3
 800075c:	f043 0305 	orr.w	r3, r3, #5
 8000760:	b25b      	sxtb	r3, r3
		wByte = (uint8_t) (RFLR_DETECTIONOPTIMIZE_SF6
 8000762:	73fb      	strb	r3, [r7, #15]

		res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	461a      	mov	r2, r3
 8000768:	2131      	movs	r1, #49	; 0x31
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff feb2 	bl	80004d4 <RFM95_writeRegister>
 8000770:	4603      	mov	r3, r0
 8000772:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 8000774:	7bbb      	ldrb	r3, [r7, #14]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <RFM95_setSpreadingFactor+0xc6>
		{
			return res;
 800077a:	7bbb      	ldrb	r3, [r7, #14]
 800077c:	e047      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
		}

		/* 4. Write register address 0x37 to value 0x0C */
		return RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD,
 800077e:	220c      	movs	r2, #12
 8000780:	2137      	movs	r1, #55	; 0x37
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff fea6 	bl	80004d4 <RFM95_writeRegister>
 8000788:	4603      	mov	r3, r0
 800078a:	e040      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
		RFLR_DETECTIONTHRESH_SF6);
	}

	/* else if SF != 6 following below */
	/* 1. Write bit 2-0 of register 0x31 to value "0b101" */
	res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 800078c:	f107 030d 	add.w	r3, r7, #13
 8000790:	461a      	mov	r2, r3
 8000792:	2131      	movs	r1, #49	; 0x31
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff25 	bl	80005e4 <RFM95_readRegister>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 800079e:	7bbb      	ldrb	r3, [r7, #14]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <RFM95_setSpreadingFactor+0xf0>
	{
		return THT_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e032      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
	}

	wByte = (uint8_t) (RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12
			| (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 80007a8:	7b7b      	ldrb	r3, [r7, #13]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	f023 0307 	bic.w	r3, r3, #7
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	f043 0303 	orr.w	r3, r3, #3
 80007b6:	b25b      	sxtb	r3, r3
	wByte = (uint8_t) (RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12
 80007b8:	73fb      	strb	r3, [r7, #15]

	res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	461a      	mov	r2, r3
 80007be:	2131      	movs	r1, #49	; 0x31
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe87 	bl	80004d4 <RFM95_writeRegister>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80007ca:	7bbb      	ldrb	r3, [r7, #14]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <RFM95_setSpreadingFactor+0x11c>
	{
		return res;
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	e01c      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
	}

	/* 2. Write register address 0x37 to value 0x0C */
	res = RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD,
 80007d4:	220a      	movs	r2, #10
 80007d6:	2137      	movs	r1, #55	; 0x37
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fe7b 	bl	80004d4 <RFM95_writeRegister>
 80007de:	4603      	mov	r3, r0
 80007e0:	73bb      	strb	r3, [r7, #14]
	RFLR_DETECTIONTHRESH_SF7_TO_SF12);

	if (res != THT_OK)
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <RFM95_setSpreadingFactor+0x134>
	{
		return res;
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	e010      	b.n	800080e <RFM95_setSpreadingFactor+0x156>
	}

	/* 3. Write register REG_LR_MODEMCONFIG2 to config SF */
	/* Set the new value of REG_LR_MODEMCONFIG2 register */
	wByte = (uint8_t) (SF | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	f003 030f 	and.w	r3, r3, #15
 80007f4:	b25a      	sxtb	r2, r3
 80007f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	73fb      	strb	r3, [r7, #15]

	/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	461a      	mov	r2, r3
 8000804:	211e      	movs	r1, #30
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fe64 	bl	80004d4 <RFM95_writeRegister>
 800080c:	4603      	mov	r3, r0
//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
}
 800080e:	4618      	mov	r0, r3
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <RFM95_setBandwidth>:
 * Phạm vi băng thông phù hợp với hầu hết các tình huống quy định được đưa ra trong
 * bảng thông số kỹ thuật của modem LoRaTM (xem Phần 2.4.5).
 */

THT_StatusTypeDef RFM95_setBandwidth(RFM95_HandleTypeDef *const me, uint8_t BW)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	460b      	mov	r3, r1
 8000820:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <RFM95_setBandwidth+0x16>
	{
		return THT_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	e027      	b.n	800087c <RFM95_setBandwidth+0x66>
	}

	me->parent.BW = BW >> 4u;
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	091b      	lsrs	r3, r3, #4
 8000830:	b2da      	uxtb	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	715a      	strb	r2, [r3, #5]

	uint8_t rByte = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 800083e:	f107 030d 	add.w	r3, r7, #13
 8000842:	461a      	mov	r2, r3
 8000844:	211d      	movs	r1, #29
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fecc 	bl	80005e4 <RFM95_readRegister>
 800084c:	4603      	mov	r3, r0
 800084e:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <RFM95_setBandwidth+0x44>
	{
		return THT_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e010      	b.n	800087c <RFM95_setBandwidth+0x66>
	}

	wByte = (uint8_t) (BW | (rByte & RFLR_MODEMCONFIG1_BW_MASK));
 800085a:	7b7b      	ldrb	r3, [r7, #13]
 800085c:	b25b      	sxtb	r3, r3
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	b25a      	sxtb	r2, r3
 8000864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000868:	4313      	orrs	r3, r2
 800086a:	b25b      	sxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	461a      	mov	r2, r3
 8000872:	211d      	movs	r1, #29
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fe2d 	bl	80004d4 <RFM95_writeRegister>
 800087a:	4603      	mov	r3, r0
//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <RFM95_setLNA>:

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
}

THT_StatusTypeDef RFM95_setLNA(RFM95_HandleTypeDef *const me)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	uint8_t rByte = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_LNA, &rByte);
 8000894:	f107 030d 	add.w	r3, r7, #13
 8000898:	461a      	mov	r2, r3
 800089a:	210c      	movs	r1, #12
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fea1 	bl	80005e4 <RFM95_readRegister>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <RFM95_setLNA+0x2c>
	{
		return THT_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e00c      	b.n	80008ca <RFM95_setLNA+0x46>
	}

	wByte = (uint8_t) (RFLR_LNA_BOOST_HF_ON | (rByte & RFLR_LNA_BOOST_HF_MASK));
 80008b0:	7b7b      	ldrb	r3, [r7, #13]
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	f043 0303 	orr.w	r3, r3, #3
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_LNA, wByte);
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	461a      	mov	r2, r3
 80008c0:	210c      	movs	r1, #12
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe06 	bl	80004d4 <RFM95_writeRegister>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <RFM95_setMode>:
 * nhận, nếu kích thước gói vượt quá bộ nhớ đệm được phân bổ cho Rx, nó sẽ ghi
 * đè lên phần truyền của bộ đệm dữ liệu.
 */

THT_StatusTypeDef RFM95_setMode(RFM95_HandleTypeDef *const me, uint8_t mode)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	460b      	mov	r3, r1
 80008dc:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d101      	bne.n	80008e8 <RFM95_setMode+0x16>
	{
		return THT_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e022      	b.n	800092e <RFM95_setMode+0x5c>
	}

	uint8_t rByte = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_OPMODE, &rByte);
 80008f0:	f107 030d 	add.w	r3, r7, #13
 80008f4:	461a      	mov	r2, r3
 80008f6:	2101      	movs	r1, #1
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fe73 	bl	80005e4 <RFM95_readRegister>
 80008fe:	4603      	mov	r3, r0
 8000900:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <RFM95_setMode+0x3a>
	{
		return THT_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e010      	b.n	800092e <RFM95_setMode+0x5c>
	}

	wByte = (uint8_t) (mode | (rByte & 0x70));
 800090c:	7b7b      	ldrb	r3, [r7, #13]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000914:	b25a      	sxtb	r2, r3
 8000916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800091a:	4313      	orrs	r3, r2
 800091c:	b25b      	sxtb	r3, r3
 800091e:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	461a      	mov	r2, r3
 8000924:	2101      	movs	r1, #1
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fdd4 	bl	80004d4 <RFM95_writeRegister>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <RFM95_setFrequency>:

THT_StatusTypeDef RFM95_setFrequency(RFM95_HandleTypeDef *const me,
		uint32_t frequency)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
	if (me == NULL)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <RFM95_setFrequency+0x14>
	{
		return THT_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e02c      	b.n	80009a4 <RFM95_setFrequency+0x6e>
	}

	me->parent.freq = frequency;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	601a      	str	r2, [r3, #0]
	uint64_t frf = (uint64_t) (frequency << 19u) / 32;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	04db      	lsls	r3, r3, #19
 8000954:	095b      	lsrs	r3, r3, #5
 8000956:	461a      	mov	r2, r3
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t freq[3] = { (uint8_t) (frf >> 16), (uint8_t) (frf >> 8),
 8000960:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000964:	f04f 0200 	mov.w	r2, #0
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	0c02      	lsrs	r2, r0, #16
 800096e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000972:	0c0b      	lsrs	r3, r1, #16
 8000974:	b2d3      	uxtb	r3, r2
 8000976:	733b      	strb	r3, [r7, #12]
 8000978:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	0a02      	lsrs	r2, r0, #8
 8000986:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800098a:	0a0b      	lsrs	r3, r1, #8
 800098c:	b2d3      	uxtb	r3, r2
 800098e:	737b      	strb	r3, [r7, #13]
			(uint8_t) (frf >> 0) };
 8000990:	7c3b      	ldrb	r3, [r7, #16]
	uint8_t freq[3] = { (uint8_t) (frf >> 16), (uint8_t) (frf >> 8),
 8000992:	73bb      	strb	r3, [r7, #14]

	return RFM95_writeBurstRegister(me, REG_LR_FRFMSB, freq, 3);
 8000994:	f107 020c 	add.w	r2, r7, #12
 8000998:	2303      	movs	r3, #3
 800099a:	2106      	movs	r1, #6
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff fdcc 	bl	800053a <RFM95_writeBurstRegister>
 80009a2:	4603      	mov	r3, r0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <RFM95_transmit>:
/*
 * Data tranmission Squence
 */
THT_StatusTypeDef RFM95_transmit(RFM95_HandleTypeDef *const me, uint8_t *pData,
		uint8_t size, uint32_t timeout)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	4613      	mov	r3, r2
 80009ba:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pData == NULL)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <RFM95_transmit+0x1c>
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <RFM95_transmit+0x20>
	{
		return THT_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e093      	b.n	8000af4 <RFM95_transmit+0x148>
	}

	uint8_t rByte = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	76fb      	strb	r3, [r7, #27]
	uint8_t currentMode = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	74bb      	strb	r3, [r7, #18]

	RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, 0xA0);
 80009d8:	22a0      	movs	r2, #160	; 0xa0
 80009da:	211e      	movs	r1, #30
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff fd79 	bl	80004d4 <RFM95_writeRegister>

	/* 0. Tx init */
	/* Read current value of REG_LR_MODEMCONFIG1 register */
	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 80009e2:	f107 0312 	add.w	r3, r7, #18
 80009e6:	461a      	mov	r2, r3
 80009e8:	2101      	movs	r1, #1
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff fdfa 	bl	80005e4 <RFM95_readRegister>

	/* 1. Static configuration registers can only be accessed in Sleep mode, Stand-by mode or FSTX mode. */
	wByte = (uint8_t) (RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	b25b      	sxtb	r3, r3
 80009f4:	f023 0307 	bic.w	r3, r3, #7
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8000a02:	7efb      	ldrb	r3, [r7, #27]
 8000a04:	461a      	mov	r2, r3
 8000a06:	2101      	movs	r1, #1
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fd63 	bl	80004d4 <RFM95_writeRegister>

	if (me->parent.SF == RFLR_MODEMCONFIG2_SF_6 >> 4)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	2b06      	cmp	r3, #6
 8000a14:	d103      	bne.n	8000a1e <RFM95_transmit+0x72>
	{
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 8000a16:	2101      	movs	r1, #1
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff fe19 	bl	8000650 <RFM95_setHeaderMode>
	}

	/* 2. The LoRaTM FIFO can only be filled in Stand-by mode. */
	RFM95_readRegister(me, REG_LR_FIFOTXBASEADDR, &rByte);
 8000a1e:	f107 0313 	add.w	r3, r7, #19
 8000a22:	461a      	mov	r2, r3
 8000a24:	210e      	movs	r1, #14
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff fddc 	bl	80005e4 <RFM95_readRegister>

	RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8000a2c:	7cfb      	ldrb	r3, [r7, #19]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	210d      	movs	r1, #13
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff fd4e 	bl	80004d4 <RFM95_writeRegister>

//	RFM95_writeRegister(me, REG_LR_PAYLOADLENGTH, 0x0);

	RFM95_writeRegister(me, REG_LR_PAYLOADLENGTH, size);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2122      	movs	r1, #34	; 0x22
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff fd48 	bl	80004d4 <RFM95_writeRegister>
	uint8_t temp = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	747b      	strb	r3, [r7, #17]
	RFM95_readRegister(me, REG_LR_PAYLOADLENGTH, &temp);
 8000a48:	f107 0311 	add.w	r3, r7, #17
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	2122      	movs	r1, #34	; 0x22
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff fdc7 	bl	80005e4 <RFM95_readRegister>
	(void) temp;
	for (size_t i = 0; i < size; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
 8000a5a:	e00b      	b.n	8000a74 <RFM95_transmit+0xc8>
	{
		RFM95_writeRegister(me, REG_LR_FIFO, *(pData++));
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f7ff fd33 	bl	80004d4 <RFM95_writeRegister>
	for (size_t i = 0; i < size; i++)
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3301      	adds	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d3ef      	bcc.n	8000a5c <RFM95_transmit+0xb0>
	}

	/* 3. Data transmission is initiated by sending TX mode request. */
	wByte = (uint8_t) (RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_TRANSMITTER);
 8000a7c:	2383      	movs	r3, #131	; 0x83
 8000a7e:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8000a80:	7efb      	ldrb	r3, [r7, #27]
 8000a82:	461a      	mov	r2, r3
 8000a84:	2101      	movs	r1, #1
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff fd24 	bl	80004d4 <RFM95_writeRegister>

	HAL_Delay(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a90:	f000 fd46 	bl	8001520 <HAL_Delay>
	/* 4. Upon completion the TxDone interrupt is issued and the radio returns to Stand-by mode. */
	uint32_t tickStart = HAL_GetTick();
 8000a94:	f000 fd3a 	bl	800150c <HAL_GetTick>
 8000a98:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8000a9a:	e022      	b.n	8000ae2 <RFM95_transmit+0x136>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8000a9c:	f107 0313 	add.w	r3, r7, #19
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	2112      	movs	r1, #18
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff fd9d 	bl	80005e4 <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_TXDONE) == RFLR_IRQFLAGS_TXDONE)
 8000aaa:	7cfb      	ldrb	r3, [r7, #19]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d016      	beq.n	8000ae2 <RFM95_transmit+0x136>
		{
			/* Clear TX DONE flag by write 1 */
			wByte = (uint8_t) (RFLR_IRQFLAGS_TXDONE
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	76fb      	strb	r3, [r7, #27]
					| (rByte & RFLR_IRQFLAGS_TXDONE_MASK));
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8000ab8:	7efb      	ldrb	r3, [r7, #27]
 8000aba:	461a      	mov	r2, r3
 8000abc:	2112      	movs	r1, #18
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fd08 	bl	80004d4 <RFM95_writeRegister>
			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8000ac4:	f107 0313 	add.w	r3, r7, #19
 8000ac8:	461a      	mov	r2, r3
 8000aca:	2112      	movs	r1, #18
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff fd89 	bl	80005e4 <RFM95_readRegister>
			return RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8000ad2:	7cbb      	ldrb	r3, [r7, #18]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff fcfb 	bl	80004d4 <RFM95_writeRegister>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e008      	b.n	8000af4 <RFM95_transmit+0x148>
	while (HAL_GetTick() - tickStart <= timeout)
 8000ae2:	f000 fd13 	bl	800150c <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d2d4      	bcs.n	8000a9c <RFM95_transmit+0xf0>
		}
	}

	return THT_TIMEOUT;
 8000af2:	2303      	movs	r3, #3
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <RFM95_receiveContinuous>:
 at addresses 0x2F and 0x30 in the event that bit 7 at address 0x31 is re-set to 1 (this would automatically erase any
 previous value set in those registers).
 */
THT_StatusTypeDef RFM95_receiveContinuous(RFM95_HandleTypeDef *const me,
		uint8_t pBuffer[], uint8_t size, uint32_t timeout)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <RFM95_receiveContinuous+0x1c>
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <RFM95_receiveContinuous+0x20>
	{
		return THT_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e0d5      	b.n	8000cc8 <RFM95_receiveContinuous+0x1cc>
	}

	uint8_t rByte = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	77fb      	strb	r3, [r7, #31]
	uint8_t currentMode = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	74bb      	strb	r3, [r7, #18]

	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 8000b28:	f107 0312 	add.w	r3, r7, #18
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2101      	movs	r1, #1
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff fd57 	bl	80005e4 <RFM95_readRegister>
//	if ((currentMode & RFLR_OPMODE_RECEIVER) != RFLR_OPMODE_RECEIVER)
//	{
//		return THT_ERROR;
//	}

	wByte = (uint8_t) (RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 8000b36:	2385      	movs	r3, #133	; 0x85
 8000b38:	77fb      	strb	r3, [r7, #31]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2101      	movs	r1, #1
 8000b40:	68f8      	ldr	r0, [r7, #12]
 8000b42:	f7ff fcc7 	bl	80004d4 <RFM95_writeRegister>

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8000b46:	f107 0313 	add.w	r3, r7, #19
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	2131      	movs	r1, #49	; 0x31
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f7ff fd48 	bl	80005e4 <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	795b      	ldrb	r3, [r3, #5]
 8000b58:	2b09      	cmp	r3, #9
 8000b5a:	d104      	bne.n	8000b66 <RFM95_receiveContinuous+0x6a>
	{
		wByte = (0x80 | (rByte & 0x7F));
 8000b5c:	7cfb      	ldrb	r3, [r7, #19]
 8000b5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b62:	77fb      	strb	r3, [r7, #31]
 8000b64:	e003      	b.n	8000b6e <RFM95_receiveContinuous+0x72>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b6c:	77fb      	strb	r3, [r7, #31]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8000b6e:	7ffb      	ldrb	r3, [r7, #31]
 8000b70:	461a      	mov	r2, r3
 8000b72:	2131      	movs	r1, #49	; 0x31
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f7ff fcad 	bl	80004d4 <RFM95_writeRegister>

	switch (me->parent.BW)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	795b      	ldrb	r3, [r3, #5]
 8000b7e:	2b08      	cmp	r3, #8
 8000b80:	dc2a      	bgt.n	8000bd8 <RFM95_receiveContinuous+0xdc>
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	da1d      	bge.n	8000bc2 <RFM95_receiveContinuous+0xc6>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <RFM95_receiveContinuous+0x9a>
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db24      	blt.n	8000bd8 <RFM95_receiveContinuous+0xdc>
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d821      	bhi.n	8000bd8 <RFM95_receiveContinuous+0xdc>
 8000b94:	e00a      	b.n	8000bac <RFM95_receiveContinuous+0xb0>
	{
		case LORA_BW_7D8:
			RFM95_writeRegister(me, 0x27, 0x48);
 8000b96:	2248      	movs	r2, #72	; 0x48
 8000b98:	2127      	movs	r1, #39	; 0x27
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f7ff fc9a 	bl	80004d4 <RFM95_writeRegister>
			RFM95_writeRegister(me, 0x3F, 0x00);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	213f      	movs	r1, #63	; 0x3f
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff fc95 	bl	80004d4 <RFM95_writeRegister>
			break;
 8000baa:	e016      	b.n	8000bda <RFM95_receiveContinuous+0xde>
		case LORA_BW_10D4:
		case LORA_BW_15D6:
		case LORA_BW_20D8:
		case LORA_BW_31D25:
		case LORA_BW_41D7:
			RFM95_writeRegister(me, 0x27, 0x44);
 8000bac:	2244      	movs	r2, #68	; 0x44
 8000bae:	2127      	movs	r1, #39	; 0x27
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff fc8f 	bl	80004d4 <RFM95_writeRegister>
			RFM95_writeRegister(me, 0x3F, 0x00);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	213f      	movs	r1, #63	; 0x3f
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff fc8a 	bl	80004d4 <RFM95_writeRegister>
			break;
 8000bc0:	e00b      	b.n	8000bda <RFM95_receiveContinuous+0xde>
		case LORA_BW_62D5:
		case LORA_BW_125:
		case LORA_BW_250:
			RFM95_writeRegister(me, 0x27, 0x40);
 8000bc2:	2240      	movs	r2, #64	; 0x40
 8000bc4:	2127      	movs	r1, #39	; 0x27
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff fc84 	bl	80004d4 <RFM95_writeRegister>
			RFM95_writeRegister(me, 0x3F, 0x00);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	213f      	movs	r1, #63	; 0x3f
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f7ff fc7f 	bl	80004d4 <RFM95_writeRegister>
			break;
 8000bd6:	e000      	b.n	8000bda <RFM95_receiveContinuous+0xde>
		case LORA_BW_500:
		default:
			break;
 8000bd8:	bf00      	nop
	}

	uint32_t tickStart = HAL_GetTick();
 8000bda:	f000 fc97 	bl	800150c <HAL_GetTick>
 8000bde:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8000be0:	e063      	b.n	8000caa <RFM95_receiveContinuous+0x1ae>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8000be2:	f107 0313 	add.w	r3, r7, #19
 8000be6:	461a      	mov	r2, r3
 8000be8:	2112      	movs	r1, #18
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fcfa 	bl	80005e4 <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 8000bf0:	7cfb      	ldrb	r3, [r7, #19]
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	da08      	bge.n	8000c0a <RFM95_receiveContinuous+0x10e>
		{
			/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
			wByte = (uint8_t) (RFLR_IRQFLAGS_RXTIMEOUT
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	77fb      	strb	r3, [r7, #31]
					| (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8000bfc:	7ffb      	ldrb	r3, [r7, #31]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2112      	movs	r1, #18
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff fc66 	bl	80004d4 <RFM95_writeRegister>
 8000c08:	e04f      	b.n	8000caa <RFM95_receiveContinuous+0x1ae>
		}
		else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 8000c0a:	7cfb      	ldrb	r3, [r7, #19]
 8000c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d04a      	beq.n	8000caa <RFM95_receiveContinuous+0x1ae>
		{
			/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
			wByte = (uint8_t) (RFLR_IRQFLAGS_RXDONE
 8000c14:	2340      	movs	r3, #64	; 0x40
 8000c16:	77fb      	strb	r3, [r7, #31]
					| (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8000c18:	7ffb      	ldrb	r3, [r7, #31]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2112      	movs	r1, #18
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f7ff fc58 	bl	80004d4 <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8000c24:	f107 0313 	add.w	r3, r7, #19
 8000c28:	461a      	mov	r2, r3
 8000c2a:	2112      	movs	r1, #18
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f7ff fcd9 	bl	80005e4 <RFM95_readRegister>

			/* Payload CRC not error - read data */
			if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR)
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	f003 0320 	and.w	r3, r3, #32
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d12e      	bne.n	8000c9a <RFM95_receiveContinuous+0x19e>
					!= RFLR_IRQFLAGS_PAYLOADCRCERROR)
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8000c3c:	7cbb      	ldrb	r3, [r7, #18]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	2101      	movs	r1, #1
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff fc46 	bl	80004d4 <RFM95_writeRegister>

				/* Read first byte position of last packet */
				RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8000c48:	f107 0313 	add.w	r3, r7, #19
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2110      	movs	r1, #16
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fcc7 	bl	80005e4 <RFM95_readRegister>

				/* */
				RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	210d      	movs	r1, #13
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f7ff fc39 	bl	80004d4 <RFM95_writeRegister>

				RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 8000c62:	f107 0313 	add.w	r3, r7, #19
 8000c66:	461a      	mov	r2, r3
 8000c68:	2113      	movs	r1, #19
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff fcba 	bl	80005e4 <RFM95_readRegister>
				/* May be use read burst or fifo read */
				for (size_t i = 0; i < rByte; i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	e00a      	b.n	8000c8c <RFM95_receiveContinuous+0x190>
				{
					RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	60ba      	str	r2, [r7, #8]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fcaf 	bl	80005e4 <RFM95_readRegister>
				for (size_t i = 0; i < rByte; i++)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
 8000c8c:	7cfb      	ldrb	r3, [r7, #19]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d3ef      	bcc.n	8000c76 <RFM95_receiveContinuous+0x17a>
				}

				return THT_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e016      	b.n	8000cc8 <RFM95_receiveContinuous+0x1cc>
			}
			else
			{
				/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
				wByte = (uint8_t) (RFLR_IRQFLAGS_PAYLOADCRCERROR
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	77fb      	strb	r3, [r7, #31]
						| (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
				RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8000c9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2112      	movs	r1, #18
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff fc15 	bl	80004d4 <RFM95_writeRegister>
	while (HAL_GetTick() - tickStart <= timeout)
 8000caa:	f000 fc2f 	bl	800150c <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d293      	bcs.n	8000be2 <RFM95_receiveContinuous+0xe6>
			}
		}
	}

	RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8000cba:	7cbb      	ldrb	r3, [r7, #18]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f7ff fc07 	bl	80004d4 <RFM95_writeRegister>
	return THT_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <RFM95_reset>:
	}

	return THT_ERROR;
}
void RFM95_reset(RFM95_HandleTypeDef *const me)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d01f      	beq.n	8000d1e <RFM95_reset+0x4e>
	{
		return;
	}

	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	8b9b      	ldrh	r3, [r3, #28]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f000 fed9 	bl	8001aa0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 fc16 	bl	8001520 <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	8b9b      	ldrh	r3, [r3, #28]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f000 fece 	bl	8001aa0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f000 fc0b 	bl	8001520 <HAL_Delay>

	uint8_t rByte = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	73fb      	strb	r3, [r7, #15]
	RFM95_readRegister(me, REG_LR_VERSION, &rByte);
 8000d0e:	f107 030f 	add.w	r3, r7, #15
 8000d12:	461a      	mov	r2, r3
 8000d14:	2142      	movs	r1, #66	; 0x42
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fc64 	bl	80005e4 <RFM95_readRegister>
 8000d1c:	e000      	b.n	8000d20 <RFM95_reset+0x50>
		return;
 8000d1e:	bf00      	nop

	if (rByte != 0x12)
	{
//		while(1);
	}
}
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <RFM95_setRFPowerAmplifier>:
/* Công suất 14dBm đầu ra cần có antena thfi mới truyền đi được, nếu công suất là 20dBm thì không cần antena vẫn truyền đi được
 * Vấn đề là do có hoặc không có antena
 */
THT_StatusTypeDef RFM95_setRFPowerAmplifier(RFM95_HandleTypeDef *const me,
		uint8_t paSelect, uint8_t Pout)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	70fb      	strb	r3, [r7, #3]
 8000d32:	4613      	mov	r3, r2
 8000d34:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <RFM95_setRFPowerAmplifier+0x1a>
	{
		return THT_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e044      	b.n	8000dca <RFM95_setRFPowerAmplifier+0xa4>
	}

	uint8_t wByte = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
	uint8_t outputPower = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73bb      	strb	r3, [r7, #14]
	if (paSelect == RFLR_PACONFIG_PASELECT_PABOOST
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b80      	cmp	r3, #128	; 0x80
 8000d4c:	d11e      	bne.n	8000d8c <RFM95_setRFPowerAmplifier+0x66>
			&& ((Pout >= 15) && (Pout <= 20)))
 8000d4e:	78bb      	ldrb	r3, [r7, #2]
 8000d50:	2b0e      	cmp	r3, #14
 8000d52:	d91b      	bls.n	8000d8c <RFM95_setRFPowerAmplifier+0x66>
 8000d54:	78bb      	ldrb	r3, [r7, #2]
 8000d56:	2b14      	cmp	r3, #20
 8000d58:	d818      	bhi.n	8000d8c <RFM95_setRFPowerAmplifier+0x66>
	{
		if (Pout > 17)
 8000d5a:	78bb      	ldrb	r3, [r7, #2]
 8000d5c:	2b11      	cmp	r3, #17
 8000d5e:	d906      	bls.n	8000d6e <RFM95_setRFPowerAmplifier+0x48>
		{
			RFM95_writeRegister(me, REG_LR_PADAC, RFLR_PADAC_20DBM_ON);
 8000d60:	2207      	movs	r2, #7
 8000d62:	214d      	movs	r1, #77	; 0x4d
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fbb5 	bl	80004d4 <RFM95_writeRegister>
			Pout = 17;
 8000d6a:	2311      	movs	r3, #17
 8000d6c:	70bb      	strb	r3, [r7, #2]
		}

		outputPower = Pout - 17 + 15;
 8000d6e:	78bb      	ldrb	r3, [r7, #2]
 8000d70:	3b02      	subs	r3, #2
 8000d72:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t) (paSelect | outputPower);
 8000d74:	78fa      	ldrb	r2, [r7, #3]
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2109      	movs	r1, #9
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fba6 	bl	80004d4 <RFM95_writeRegister>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	e01e      	b.n	8000dca <RFM95_setRFPowerAmplifier+0xa4>
	}
	else if (paSelect == RFLR_PACONFIG_PASELECT_RFO
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d11a      	bne.n	8000dc8 <RFM95_setRFPowerAmplifier+0xa2>
			&& ((Pout >= 0) && (Pout <= 14)))
 8000d92:	78bb      	ldrb	r3, [r7, #2]
 8000d94:	2b0e      	cmp	r3, #14
 8000d96:	d817      	bhi.n	8000dc8 <RFM95_setRFPowerAmplifier+0xa2>
	{
		uint8_t maxPower = 7;    //chọn 7 để số tròn, hoặc có thể là 2, giá trị mặc định là 4
 8000d98:	2307      	movs	r3, #7
 8000d9a:	737b      	strb	r3, [r7, #13]
		outputPower = Pout;
 8000d9c:	78bb      	ldrb	r3, [r7, #2]
 8000d9e:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t) (paSelect | (maxPower << 4) | outputPower);
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25a      	sxtb	r2, r3
 8000dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2109      	movs	r1, #9
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fb88 	bl	80004d4 <RFM95_writeRegister>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	e000      	b.n	8000dca <RFM95_setRFPowerAmplifier+0xa4>
	}
	else
	{
		return THT_OK;
 8000dc8:	2300      	movs	r3, #0
	}
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dda:	f000 fb32 	bl	8001442 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dde:	f000 f885 	bl	8000eec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000de2:	f000 f92b 	bl	800103c <MX_GPIO_Init>
	MX_SPI1_Init();
 8000de6:	f000 f8c9 	bl	8000f7c <MX_SPI1_Init>
	MX_UART5_Init();
 8000dea:	f000 f8fd 	bl	8000fe8 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	rfm95.resetPort = RFM95_RESET_GPIO_Port;
 8000dee:	4b39      	ldr	r3, [pc, #228]	; (8000ed4 <main+0x100>)
 8000df0:	4a39      	ldr	r2, [pc, #228]	; (8000ed8 <main+0x104>)
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
	rfm95.resetPin = RFM95_RESET_Pin;
 8000df4:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <main+0x100>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	839a      	strh	r2, [r3, #28]
	rfm95.nssPin = RFM95_NSS_Pin;
 8000dfa:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <main+0x100>)
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	83da      	strh	r2, [r3, #30]
	rfm95.nssPort = RFM95_NSS_GPIO_Port;
 8000e00:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <main+0x100>)
 8000e02:	4a36      	ldr	r2, [pc, #216]	; (8000edc <main+0x108>)
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
	rfm95.nssPin = GPIO_PIN_4;
 8000e06:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <main+0x100>)
 8000e08:	2210      	movs	r2, #16
 8000e0a:	83da      	strh	r2, [r3, #30]
	rfm95.nssPort = GPIOA;
 8000e0c:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <main+0x100>)
 8000e0e:	4a33      	ldr	r2, [pc, #204]	; (8000edc <main+0x108>)
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
	rfm95.hspi = &hspi1;
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <main+0x100>)
 8000e14:	4a32      	ldr	r2, [pc, #200]	; (8000ee0 <main+0x10c>)
 8000e16:	619a      	str	r2, [r3, #24]
	RFM95_reset(&rfm95);
 8000e18:	482e      	ldr	r0, [pc, #184]	; (8000ed4 <main+0x100>)
 8000e1a:	f7ff ff59 	bl	8000cd0 <RFM95_reset>
	RFM95_setMode(&rfm95,
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <main+0x100>)
 8000e22:	f7ff fd56 	bl	80008d2 <RFM95_setMode>
			RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_SLEEP
					| RFLR_OPMODE_FREQMODE_ACCESS_HF);
	RFM95_setFrequency(&rfm95, 923);
 8000e26:	f240 319b 	movw	r1, #923	; 0x39b
 8000e2a:	482a      	ldr	r0, [pc, #168]	; (8000ed4 <main+0x100>)
 8000e2c:	f7ff fd83 	bl	8000936 <RFM95_setFrequency>
	RFM95_setBandwidth(&rfm95, RFLR_MODEMCONFIG1_BW_125_KHZ);
 8000e30:	2170      	movs	r1, #112	; 0x70
 8000e32:	4828      	ldr	r0, [pc, #160]	; (8000ed4 <main+0x100>)
 8000e34:	f7ff fcef 	bl	8000816 <RFM95_setBandwidth>
	RFM95_setSpreadingFactor(&rfm95, RFLR_MODEMCONFIG2_SF_10);
 8000e38:	21a0      	movs	r1, #160	; 0xa0
 8000e3a:	4826      	ldr	r0, [pc, #152]	; (8000ed4 <main+0x100>)
 8000e3c:	f7ff fc3c 	bl	80006b8 <RFM95_setSpreadingFactor>
	RFM95_setLNA(&rfm95);
 8000e40:	4824      	ldr	r0, [pc, #144]	; (8000ed4 <main+0x100>)
 8000e42:	f7ff fd1f 	bl	8000884 <RFM95_setLNA>
	RFM95_setRFPowerAmplifier(&rfm95, RFLR_PACONFIG_PASELECT_PABOOST, 20);
 8000e46:	2214      	movs	r2, #20
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	4822      	ldr	r0, [pc, #136]	; (8000ed4 <main+0x100>)
 8000e4c:	f7ff ff6b 	bl	8000d26 <RFM95_setRFPowerAmplifier>
	RFM95_setMode(&rfm95, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 8000e50:	2181      	movs	r1, #129	; 0x81
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <main+0x100>)
 8000e54:	f7ff fd3d 	bl	80008d2 <RFM95_setMode>
//			strlen("841699741004"));
//	txMsg.levelWarning = 1;
//	txMsg.CRC8 = WLV_CRC8XOR((uint8_t*) &txMsg, sizeof(txMsg) - 1);
//
//	RFM95_transmit(&rfm95, (uint8_t*) &txMsg, sizeof(LORA_TxWarning), 1000);
	uint8_t buffer[4] = { 1, 2, 3 };
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <main+0x110>)
 8000e5a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t rxBuffer[50] = { 0 };
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	222e      	movs	r2, #46	; 0x2e
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 fb01 	bl	8003470 <memset>

	uint8_t i = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	char x[20] = { 0 };
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		sprintf(x, "Hello LoRa %d", i++);
 8000e84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	f887 204f 	strb.w	r2, [r7, #79]	; 0x4f
 8000e8e:	461a      	mov	r2, r3
 8000e90:	463b      	mov	r3, r7
 8000e92:	4915      	ldr	r1, [pc, #84]	; (8000ee8 <main+0x114>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 faf3 	bl	8003480 <siprintf>

		if (THT_OK == RFM95_transmit(&rfm95, (uint8_t*) x, strlen(x), 1000))
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f96d 	bl	800017c <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4639      	mov	r1, r7
 8000ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <main+0x100>)
 8000eae:	f7ff fd7d 	bl	80009ac <RFM95_transmit>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e5      	bne.n	8000e84 <main+0xb0>
		{
			if (THT_OK
					== RFM95_receiveContinuous(&rfm95, (uint8_t*) rxBuffer,
 8000eb8:	f107 0114 	add.w	r1, r7, #20
 8000ebc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ec0:	2232      	movs	r2, #50	; 0x32
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <main+0x100>)
 8000ec4:	f7ff fe1a 	bl	8000afc <RFM95_receiveContinuous>
 8000ec8:	4603      	mov	r3, r0
			if (THT_OK
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1da      	bne.n	8000e84 <main+0xb0>
							sizeof(rxBuffer), 10000))
				__NOP();
 8000ece:	bf00      	nop
		sprintf(x, "Hello LoRa %d", i++);
 8000ed0:	e7d8      	b.n	8000e84 <main+0xb0>
 8000ed2:	bf00      	nop
 8000ed4:	2000008c 	.word	0x2000008c
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	20000118 	.word	0x20000118
 8000ee4:	00030201 	.word	0x00030201
 8000ee8:	08003cf0 	.word	0x08003cf0

08000eec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b092      	sub	sp, #72	; 0x48
 8000ef0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2234      	movs	r2, #52	; 0x34
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fab8 	bl	8003470 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f00:	463b      	mov	r3, r7
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <SystemClock_Config+0x8c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <SystemClock_Config+0x8c>)
 8000f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f1c:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f22:	2301      	movs	r3, #1
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000f2a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fdeb 	bl	8001b14 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 8000f44:	f000 f906 	bl	8001154 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 f907 	bl	8002174 <HAL_RCC_ClockConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000f6c:	f000 f8f2 	bl	8001154 <Error_Handler>
	}
}
 8000f70:	bf00      	nop
 8000f72:	3748      	adds	r7, #72	; 0x48
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <MX_SPI1_Init+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f8c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fac:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fc8:	220a      	movs	r2, #10
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fce:	f001 fb3d 	bl	800264c <HAL_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000fd8:	f000 f8bc 	bl	8001154 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000118 	.word	0x20000118
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_UART5_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <MX_UART5_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_UART5_Init+0x4c>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_UART5_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_UART5_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_UART5_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_UART5_Init+0x4c>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_UART5_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_UART5_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_UART5_Init+0x4c>)
 8001020:	f002 f8bc 	bl	800319c <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_UART5_Init+0x46>
	{
		Error_Handler();
 800102a:	f000 f893 	bl	8001154 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000d4 	.word	0x200000d4
 8001038:	40005000 	.word	0x40005000

0800103c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <MX_GPIO_Init+0x10c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a3c      	ldr	r2, [pc, #240]	; (8001148 <MX_GPIO_Init+0x10c>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <MX_GPIO_Init+0x10c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <MX_GPIO_Init+0x10c>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a36      	ldr	r2, [pc, #216]	; (8001148 <MX_GPIO_Init+0x10c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b34      	ldr	r3, [pc, #208]	; (8001148 <MX_GPIO_Init+0x10c>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <MX_GPIO_Init+0x10c>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <MX_GPIO_Init+0x10c>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <MX_GPIO_Init+0x10c>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RFM95_PWREN_GPIO_Port, RFM95_PWREN_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2108      	movs	r1, #8
 800109e:	482b      	ldr	r0, [pc, #172]	; (800114c <MX_GPIO_Init+0x110>)
 80010a0:	f000 fcfe 	bl	8001aa0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RFM95_NSS_GPIO_Port, RFM95_NSS_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2110      	movs	r1, #16
 80010a8:	4829      	ldr	r0, [pc, #164]	; (8001150 <MX_GPIO_Init+0x114>)
 80010aa:	f000 fcf9 	bl	8001aa0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RFM95_RESET_Pin | GPIO_PIN_8, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80010b4:	4825      	ldr	r0, [pc, #148]	; (800114c <MX_GPIO_Init+0x110>)
 80010b6:	f000 fcf3 	bl	8001aa0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RFM95_DIO0_Pin RFM95_DIO1_Pin RFM95_DIO2_Pin */
	GPIO_InitStruct.Pin = RFM95_DIO0_Pin | RFM95_DIO1_Pin | RFM95_DIO2_Pin;
 80010ba:	2307      	movs	r3, #7
 80010bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0x110>)
 80010d0:	f000 fb56 	bl	8001780 <HAL_GPIO_Init>

	/*Configure GPIO pins : RFM95_PWREN_Pin RFM95_RESET_Pin PC8 */
	GPIO_InitStruct.Pin = RFM95_PWREN_Pin | RFM95_RESET_Pin | GPIO_PIN_8;
 80010d4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80010d8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <MX_GPIO_Init+0x110>)
 80010ee:	f000 fb47 	bl	8001780 <HAL_GPIO_Init>

	/*Configure GPIO pin : RFM95_NSS_Pin */
	GPIO_InitStruct.Pin = RFM95_NSS_Pin;
 80010f2:	2310      	movs	r3, #16
 80010f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(RFM95_NSS_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4619      	mov	r1, r3
 8001108:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_GPIO_Init+0x114>)
 800110a:	f000 fb39 	bl	8001780 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2006      	movs	r0, #6
 8001114:	f000 fafd 	bl	8001712 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001118:	2006      	movs	r0, #6
 800111a:	f000 fb16 	bl	800174a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2007      	movs	r0, #7
 8001124:	f000 faf5 	bl	8001712 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001128:	2007      	movs	r0, #7
 800112a:	f000 fb0e 	bl	800174a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2008      	movs	r0, #8
 8001134:	f000 faed 	bl	8001712 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001138:	2008      	movs	r0, #8
 800113a:	f000 fb06 	bl	800174a <HAL_NVIC_EnableIRQ>

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000

08001154 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800115c:	e7fe      	b.n	800115c <Error_Handler+0x8>
	...

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_MspInit+0x58>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <HAL_MspInit+0x58>)
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001170:	6253      	str	r3, [r2, #36]	; 0x24
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_MspInit+0x58>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_MspInit+0x58>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <HAL_MspInit+0x58>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6213      	str	r3, [r2, #32]
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_MspInit+0x58>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <HAL_MspInit+0x58>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <HAL_MspInit+0x58>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	6253      	str	r3, [r2, #36]	; 0x24
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_MspInit+0x58>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_SPI_MspInit+0x7c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d127      	bne.n	800122e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_SPI_MspInit+0x80>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a16      	ldr	r2, [pc, #88]	; (800123c <HAL_SPI_MspInit+0x80>)
 80011e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_SPI_MspInit+0x80>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_SPI_MspInit+0x80>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_SPI_MspInit+0x80>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_SPI_MspInit+0x80>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800120e:	23e0      	movs	r3, #224	; 0xe0
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121e:	2305      	movs	r3, #5
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_SPI_MspInit+0x84>)
 800122a:	f000 faa9 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40013000 	.word	0x40013000
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <HAL_UART_MspInit+0xb4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d144      	bne.n	80012f0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	4a24      	ldr	r2, [pc, #144]	; (80012fc <HAL_UART_MspInit+0xb8>)
 800126c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001270:	6253      	str	r3, [r2, #36]	; 0x24
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <HAL_UART_MspInit+0xb8>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_UART_MspInit+0xb8>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <HAL_UART_MspInit+0xb8>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_UART_MspInit+0xb8>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012c0:	2308      	movs	r3, #8
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <HAL_UART_MspInit+0xbc>)
 80012cc:	f000 fa58 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012d0:	2304      	movs	r3, #4
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012e0:	2308      	movs	r3, #8
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <HAL_UART_MspInit+0xc0>)
 80012ec:	f000 fa48 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005000 	.word	0x40005000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 f8cb 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO0_Pin);
 800135a:	2001      	movs	r0, #1
 800135c:	f000 fbb8 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO1_Pin);
 8001368:	2002      	movs	r0, #2
 800136a:	f000 fbb1 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}

08001372 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO2_Pin);
 8001376:	2004      	movs	r0, #4
 8001378:	f000 fbaa 	bl	8001ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <_sbrk+0x5c>)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <_sbrk+0x60>)
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <_sbrk+0x64>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <_sbrk+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d207      	bcs.n	80013c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b0:	f002 f826 	bl	8003400 <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	220c      	movs	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e009      	b.n	80013d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <_sbrk+0x64>)
 80013d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20014000 	.word	0x20014000
 80013e0:	00000400 	.word	0x00000400
 80013e4:	200000c8 	.word	0x200000c8
 80013e8:	20000188 	.word	0x20000188

080013ec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	; (8001430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	; (800143c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800141e:	f7ff ffe5 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001422:	f001 fff3 	bl	800340c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001426:	f7ff fcd5 	bl	8000dd4 <main>
  bx lr
 800142a:	4770      	bx	lr
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001434:	08003d68 	.word	0x08003d68
  ldr r2, =_sbss
 8001438:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800143c:	20000184 	.word	0x20000184

08001440 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_IRQHandler>

08001442 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800144c:	2003      	movs	r0, #3
 800144e:	f000 f955 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001452:	200f      	movs	r0, #15
 8001454:	f000 f80e 	bl	8001474 <HAL_InitTick>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	e001      	b.n	8001468 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001464:	f7ff fe7c 	bl	8001160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001468:	79fb      	ldrb	r3, [r7, #7]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_InitTick+0x68>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d022      	beq.n	80014ce <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_InitTick+0x6c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_InitTick+0x68>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001494:	fbb1 f3f3 	udiv	r3, r1, r3
 8001498:	fbb2 f3f3 	udiv	r3, r2, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f962 	bl	8001766 <HAL_SYSTICK_Config>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10f      	bne.n	80014c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	d809      	bhi.n	80014c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ae:	2200      	movs	r2, #0
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	f04f 30ff 	mov.w	r0, #4294967295
 80014b6:	f000 f92c 	bl	8001712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_InitTick+0x70>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e007      	b.n	80014d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	e004      	b.n	80014d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e001      	b.n	80014d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_IncTick+0x1c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_IncTick+0x20>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_IncTick+0x1c>)
 80014f8:	6013      	str	r3, [r2, #0]
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000170 	.word	0x20000170
 8001508:	20000008 	.word	0x20000008

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b02      	ldr	r3, [pc, #8]	; (800151c <HAL_GetTick+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000170 	.word	0x20000170

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff fff0 	bl	800150c <HAL_GetTick>
 800152c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d004      	beq.n	8001544 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_Delay+0x40>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001544:	bf00      	nop
 8001546:	f7ff ffe1 	bl	800150c <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	429a      	cmp	r2, r3
 8001554:	d8f7      	bhi.n	8001546 <HAL_Delay+0x26>
  {
  }
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000008 	.word	0x20000008

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4906      	ldr	r1, [pc, #24]	; (80015fc <__NVIC_EnableIRQ+0x34>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	; (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	; (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	; 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff90 	bl	8001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff2d 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff42 	bl	80015ac <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff90 	bl	8001654 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5f 	bl	8001600 <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff35 	bl	80015c8 <__NVIC_EnableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ffa2 	bl	80016b8 <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001796:	e160      	b.n	8001a5a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8152 	beq.w	8001a54 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d005      	beq.n	80017c8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d130      	bne.n	800182a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80017fe:	2201      	movs	r2, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 0201 	and.w	r2, r3, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d017      	beq.n	8001866 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d123      	bne.n	80018ba <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	6939      	ldr	r1, [r7, #16]
 80018b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0203 	and.w	r2, r3, #3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80ac 	beq.w	8001a54 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <HAL_GPIO_Init+0x2f8>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a5d      	ldr	r2, [pc, #372]	; (8001a78 <HAL_GPIO_Init+0x2f8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_GPIO_Init+0x2f8>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001914:	4a59      	ldr	r2, [pc, #356]	; (8001a7c <HAL_GPIO_Init+0x2fc>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <HAL_GPIO_Init+0x300>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d025      	beq.n	800198c <HAL_GPIO_Init+0x20c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a50      	ldr	r2, [pc, #320]	; (8001a84 <HAL_GPIO_Init+0x304>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d01f      	beq.n	8001988 <HAL_GPIO_Init+0x208>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a4f      	ldr	r2, [pc, #316]	; (8001a88 <HAL_GPIO_Init+0x308>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d019      	beq.n	8001984 <HAL_GPIO_Init+0x204>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4e      	ldr	r2, [pc, #312]	; (8001a8c <HAL_GPIO_Init+0x30c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d013      	beq.n	8001980 <HAL_GPIO_Init+0x200>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a4d      	ldr	r2, [pc, #308]	; (8001a90 <HAL_GPIO_Init+0x310>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_GPIO_Init+0x1fc>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_GPIO_Init+0x314>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x1f8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_GPIO_Init+0x318>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_GPIO_Init+0x1f4>
 8001970:	2306      	movs	r3, #6
 8001972:	e00c      	b.n	800198e <HAL_GPIO_Init+0x20e>
 8001974:	2307      	movs	r3, #7
 8001976:	e00a      	b.n	800198e <HAL_GPIO_Init+0x20e>
 8001978:	2305      	movs	r3, #5
 800197a:	e008      	b.n	800198e <HAL_GPIO_Init+0x20e>
 800197c:	2304      	movs	r3, #4
 800197e:	e006      	b.n	800198e <HAL_GPIO_Init+0x20e>
 8001980:	2303      	movs	r3, #3
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x20e>
 8001984:	2302      	movs	r3, #2
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x20e>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x20e>
 800198c:	2300      	movs	r3, #0
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800199e:	4937      	ldr	r1, [pc, #220]	; (8001a7c <HAL_GPIO_Init+0x2fc>)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ac:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019d0:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019d6:	4b31      	ldr	r3, [pc, #196]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019fa:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_GPIO_Init+0x31c>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f47f ae97 	bne.w	8001798 <HAL_GPIO_Init+0x18>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40021400 	.word	0x40021400
 8001a98:	40021800 	.word	0x40021800
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001abc:	e003      	b.n	8001ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	619a      	str	r2, [r3, #24]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f806 	bl	8001b00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e31d      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b26:	4b94      	ldr	r3, [pc, #592]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b30:	4b91      	ldr	r3, [pc, #580]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d07b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d006      	beq.n	8001b5a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d10f      	bne.n	8001b72 <HAL_RCC_OscConfig+0x5e>
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b58:	d10b      	bne.n	8001b72 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5a:	4b87      	ldr	r3, [pc, #540]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d06a      	beq.n	8001c3c <HAL_RCC_OscConfig+0x128>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d166      	bne.n	8001c3c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e2f7      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x74>
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7e      	ldr	r2, [pc, #504]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e02d      	b.n	8001be4 <HAL_RCC_OscConfig+0xd0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10c      	bne.n	8001baa <HAL_RCC_OscConfig+0x96>
 8001b90:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a78      	ldr	r2, [pc, #480]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0xd0>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0xb8>
 8001bb2:	4b71      	ldr	r3, [pc, #452]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a70      	ldr	r2, [pc, #448]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b6e      	ldr	r3, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6d      	ldr	r2, [pc, #436]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0xd0>
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a69      	ldr	r2, [pc, #420]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a66      	ldr	r2, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fc8e 	bl	800150c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fc8a 	bl	800150c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e2ad      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c06:	4b5c      	ldr	r3, [pc, #368]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xe0>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc7a 	bl	800150c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fc76 	bl	800150c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e299      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c2e:	4b52      	ldr	r3, [pc, #328]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x108>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d05a      	beq.n	8001d00 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d119      	bne.n	8001c8a <HAL_RCC_OscConfig+0x176>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d116      	bne.n	8001c8a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5c:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_OscConfig+0x160>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e276      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	493d      	ldr	r1, [pc, #244]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c88:	e03a      	b.n	8001d00 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d020      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x268>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fc38 	bl	800150c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fc34 	bl	800150c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e257      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb2:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	492a      	ldr	r1, [pc, #168]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
 8001cd2:	e015      	b.n	8001d00 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_RCC_OscConfig+0x268>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fc17 	bl	800150c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff fc13 	bl	800150c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e236      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80b8 	beq.w	8001e7e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d170      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x218>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e21a      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d921      	bls.n	8001d80 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fc23 	bl	800258c <RCC_SetFlashLatencyFromMSIRange>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e208      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4906      	ldr	r1, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	061b      	lsls	r3, r3, #24
 8001d70:	4901      	ldr	r1, [pc, #4]	; (8001d78 <HAL_RCC_OscConfig+0x264>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
 8001d76:	e020      	b.n	8001dba <HAL_RCC_OscConfig+0x2a6>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d80:	4ba4      	ldr	r3, [pc, #656]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	49a1      	ldr	r1, [pc, #644]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d92:	4ba0      	ldr	r3, [pc, #640]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	061b      	lsls	r3, r3, #24
 8001da0:	499c      	ldr	r1, [pc, #624]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fbee 	bl	800258c <RCC_SetFlashLatencyFromMSIRange>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1d3      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	0b5b      	lsrs	r3, r3, #13
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001dca:	4a92      	ldr	r2, [pc, #584]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001dcc:	6892      	ldr	r2, [r2, #8]
 8001dce:	0912      	lsrs	r2, r2, #4
 8001dd0:	f002 020f 	and.w	r2, r2, #15
 8001dd4:	4990      	ldr	r1, [pc, #576]	; (8002018 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	5c8a      	ldrb	r2, [r1, r2]
 8001dd8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001dda:	4a90      	ldr	r2, [pc, #576]	; (800201c <HAL_RCC_OscConfig+0x508>)
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001dde:	4b90      	ldr	r3, [pc, #576]	; (8002020 <HAL_RCC_OscConfig+0x50c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fb46 	bl	8001474 <HAL_InitTick>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d045      	beq.n	8001e7e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	e1b5      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d029      	beq.n	8001e52 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dfe:	4b89      	ldr	r3, [pc, #548]	; (8002024 <HAL_RCC_OscConfig+0x510>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb82 	bl	800150c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb7e 	bl	800150c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1a1      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e1e:	4b7d      	ldr	r3, [pc, #500]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2a:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4977      	ldr	r1, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e3c:	4b75      	ldr	r3, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	4972      	ldr	r1, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e015      	b.n	8001e7e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e52:	4b74      	ldr	r3, [pc, #464]	; (8002024 <HAL_RCC_OscConfig+0x510>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fb58 	bl	800150c <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e60:	f7ff fb54 	bl	800150c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e177      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e72:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d030      	beq.n	8001eec <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d016      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	4b65      	ldr	r3, [pc, #404]	; (8002028 <HAL_RCC_OscConfig+0x514>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff fb38 	bl	800150c <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fb34 	bl	800150c <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e157      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eb2:	4b58      	ldr	r3, [pc, #352]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x38c>
 8001ebe:	e015      	b.n	8001eec <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_OscConfig+0x514>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff fb21 	bl	800150c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ece:	f7ff fb1d 	bl	800150c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e140      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80b5 	beq.w	8002064 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	4a41      	ldr	r2, [pc, #260]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6253      	str	r3, [r2, #36]	; 0x24
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b41      	ldr	r3, [pc, #260]	; (800202c <HAL_RCC_OscConfig+0x518>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b3e      	ldr	r3, [pc, #248]	; (800202c <HAL_RCC_OscConfig+0x518>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	; (800202c <HAL_RCC_OscConfig+0x518>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fae5 	bl	800150c <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7ff fae1 	bl	800150c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e104      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_RCC_OscConfig+0x518>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x466>
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	4a28      	ldr	r2, [pc, #160]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f76:	6353      	str	r3, [r2, #52]	; 0x34
 8001f78:	e02d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4c2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x488>
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f86:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f8c:	6353      	str	r3, [r2, #52]	; 0x34
 8001f8e:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	4a20      	ldr	r2, [pc, #128]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f98:	6353      	str	r3, [r2, #52]	; 0x34
 8001f9a:	e01c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4c2>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4aa>
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6353      	str	r3, [r2, #52]	; 0x34
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6353      	str	r3, [r2, #52]	; 0x34
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4c2>
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc8:	6353      	str	r3, [r2, #52]	; 0x34
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fd4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7ff fa95 	bl	800150c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fa91 	bl	800150c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0b2      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_OscConfig+0x500>)
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4d2>
 8002008:	e023      	b.n	8002052 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff fa7f 	bl	800150c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002010:	e019      	b.n	8002046 <HAL_RCC_OscConfig+0x532>
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	08003d0c 	.word	0x08003d0c
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004
 8002024:	42470020 	.word	0x42470020
 8002028:	42470680 	.word	0x42470680
 800202c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff fa6c 	bl	800150c <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e08d      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002046:	4b49      	ldr	r3, [pc, #292]	; (800216c <HAL_RCC_OscConfig+0x658>)
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ee      	bne.n	8002030 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002052:	7ffb      	ldrb	r3, [r7, #31]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002058:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_RCC_OscConfig+0x658>)
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	4a43      	ldr	r2, [pc, #268]	; (800216c <HAL_RCC_OscConfig+0x658>)
 800205e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002062:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	2b00      	cmp	r3, #0
 800206a:	d079      	beq.n	8002160 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d056      	beq.n	8002120 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	2b02      	cmp	r3, #2
 8002078:	d13b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <HAL_RCC_OscConfig+0x65c>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fa44 	bl	800150c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff fa40 	bl	800150c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e063      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <HAL_RCC_OscConfig+0x658>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_OscConfig+0x658>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	4319      	orrs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	430b      	orrs	r3, r1
 80020be:	492b      	ldr	r1, [pc, #172]	; (800216c <HAL_RCC_OscConfig+0x658>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_OscConfig+0x65c>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff fa1f 	bl	800150c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff fa1b 	bl	800150c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e03e      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_RCC_OscConfig+0x658>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x5be>
 80020f0:	e036      	b.n	8002160 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <HAL_RCC_OscConfig+0x65c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fa08 	bl	800150c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff fa04 	bl	800150c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e027      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002112:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_RCC_OscConfig+0x658>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x5ec>
 800211e:	e01f      	b.n	8002160 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e01a      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_RCC_OscConfig+0x658>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	429a      	cmp	r2, r3
 800213e:	d10d      	bne.n	800215c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	42470060 	.word	0x42470060

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e11a      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b8f      	ldr	r3, [pc, #572]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d919      	bls.n	80021ca <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d105      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x34>
 800219c:	4b8a      	ldr	r3, [pc, #552]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a89      	ldr	r2, [pc, #548]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b87      	ldr	r3, [pc, #540]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 0201 	bic.w	r2, r3, #1
 80021b0:	4985      	ldr	r1, [pc, #532]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b8:	4b83      	ldr	r3, [pc, #524]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0f9      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d6:	4b7d      	ldr	r3, [pc, #500]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	497a      	ldr	r1, [pc, #488]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 808e 	beq.w	8002312 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021fe:	4b73      	ldr	r3, [pc, #460]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d121      	bne.n	800224e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0d7      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002216:	4b6d      	ldr	r3, [pc, #436]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0cb      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800222e:	4b67      	ldr	r3, [pc, #412]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0bf      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800223e:	4b63      	ldr	r3, [pc, #396]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0b7      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224e:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	495c      	ldr	r1, [pc, #368]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 800225c:	4313      	orrs	r3, r2
 800225e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002260:	f7ff f954 	bl	800150c <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d112      	bne.n	8002294 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7ff f94c 	bl	800150c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e09b      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b08      	cmp	r3, #8
 8002290:	d1ee      	bne.n	8002270 <HAL_RCC_ClockConfig+0xfc>
 8002292:	e03e      	b.n	8002312 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800229c:	e00a      	b.n	80022b4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229e:	f7ff f935 	bl	800150c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e084      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b4:	4b45      	ldr	r3, [pc, #276]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	d1ee      	bne.n	800229e <HAL_RCC_ClockConfig+0x12a>
 80022c0:	e027      	b.n	8002312 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d11d      	bne.n	8002306 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7ff f91e 	bl	800150c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e06d      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e2:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d1ee      	bne.n	80022cc <HAL_RCC_ClockConfig+0x158>
 80022ee:	e010      	b.n	8002312 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff f90c 	bl	800150c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e05b      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ee      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d219      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCC_ClockConfig+0x1be>
 8002326:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0201 	bic.w	r2, r3, #1
 800233a:	4923      	ldr	r1, [pc, #140]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_RCC_ClockConfig+0x254>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e034      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002360:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4917      	ldr	r1, [pc, #92]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	490f      	ldr	r1, [pc, #60]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002392:	f000 f823 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_RCC_ClockConfig+0x258>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490b      	ldr	r1, [pc, #44]	; (80023d0 <HAL_RCC_ClockConfig+0x25c>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x260>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x264>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f85e 	bl	8001474 <HAL_InitTick>
 80023b8:	4603      	mov	r3, r0
 80023ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80023bc:	7afb      	ldrb	r3, [r7, #11]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08003d0c 	.word	0x08003d0c
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80023e2:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d00c      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x30>
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d87c      	bhi.n	80024f0 <HAL_RCC_GetSysClockFreq+0x114>
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x24>
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x2a>
 80023fe:	e077      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b46      	ldr	r3, [pc, #280]	; (800251c <HAL_RCC_GetSysClockFreq+0x140>)
 8002402:	613b      	str	r3, [r7, #16]
      break;
 8002404:	e082      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002406:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCC_GetSysClockFreq+0x144>)
 8002408:	613b      	str	r3, [r7, #16]
      break;
 800240a:	e07f      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	0c9b      	lsrs	r3, r3, #18
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	4a43      	ldr	r2, [pc, #268]	; (8002524 <HAL_RCC_GetSysClockFreq+0x148>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	0d9b      	lsrs	r3, r3, #22
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002426:	4b3c      	ldr	r3, [pc, #240]	; (8002518 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01a      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	461a      	mov	r2, r3
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	4939      	ldr	r1, [pc, #228]	; (8002520 <HAL_RCC_GetSysClockFreq+0x144>)
 800243c:	fb01 f003 	mul.w	r0, r1, r3
 8002440:	2100      	movs	r1, #0
 8002442:	fb01 f102 	mul.w	r1, r1, r2
 8002446:	1844      	adds	r4, r0, r1
 8002448:	4935      	ldr	r1, [pc, #212]	; (8002520 <HAL_RCC_GetSysClockFreq+0x144>)
 800244a:	fba2 0101 	umull	r0, r1, r2, r1
 800244e:	1863      	adds	r3, r4, r1
 8002450:	4619      	mov	r1, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	461a      	mov	r2, r3
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f7fd fe97 	bl	800018c <__aeabi_uldivmod>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4613      	mov	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e040      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	461c      	mov	r4, r3
 800246c:	f04f 0500 	mov.w	r5, #0
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	014b      	lsls	r3, r1, #5
 800247e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002482:	0142      	lsls	r2, r0, #5
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	1b00      	subs	r0, r0, r4
 800248a:	eb61 0105 	sbc.w	r1, r1, r5
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	018b      	lsls	r3, r1, #6
 8002498:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800249c:	0182      	lsls	r2, r0, #6
 800249e:	1a12      	subs	r2, r2, r0
 80024a0:	eb63 0301 	sbc.w	r3, r3, r1
 80024a4:	f04f 0000 	mov.w	r0, #0
 80024a8:	f04f 0100 	mov.w	r1, #0
 80024ac:	00d9      	lsls	r1, r3, #3
 80024ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024b2:	00d0      	lsls	r0, r2, #3
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	1912      	adds	r2, r2, r4
 80024ba:	eb45 0303 	adc.w	r3, r5, r3
 80024be:	f04f 0000 	mov.w	r0, #0
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	0299      	lsls	r1, r3, #10
 80024c8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024cc:	0290      	lsls	r0, r2, #10
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	461a      	mov	r2, r3
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	f7fd fe55 	bl	800018c <__aeabi_uldivmod>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4613      	mov	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	613b      	str	r3, [r7, #16]
      break;
 80024ee:	e00d      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	0b5b      	lsrs	r3, r3, #13
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	613b      	str	r3, [r7, #16]
      break;
 800250a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250c:	693b      	ldr	r3, [r7, #16]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bdb0      	pop	{r4, r5, r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	00f42400 	.word	0x00f42400
 8002520:	016e3600 	.word	0x016e3600
 8002524:	08003d00 	.word	0x08003d00

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800252c:	4b02      	ldr	r3, [pc, #8]	; (8002538 <HAL_RCC_GetHCLKFreq+0x10>)
 800252e:	681b      	ldr	r3, [r3, #0]
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002540:	f7ff fff2 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40023800 	.word	0x40023800
 8002560:	08003d1c 	.word	0x08003d1c

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002568:	f7ff ffde 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0adb      	lsrs	r3, r3, #11
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08003d1c 	.word	0x08003d1c

0800258c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d12c      	bne.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e016      	b.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	4a1f      	ldr	r2, [pc, #124]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6253      	str	r3, [r2, #36]	; 0x24
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80025dc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80025f0:	d105      	bne.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x72>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025f8:	d101      	bne.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80025fa:	2301      	movs	r3, #1
 80025fc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d105      	bne.n	8002610 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 0201 	bic.w	r2, r3, #1
 8002618:	490b      	ldr	r1, [pc, #44]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000
 8002648:	40023c00 	.word	0x40023c00

0800264c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e07b      	b.n	8002756 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800266e:	d009      	beq.n	8002684 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
 8002676:	e005      	b.n	8002684 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fd8c 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	ea42 0103 	orr.w	r1, r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0104 	and.w	r1, r3, #4
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f003 0210 	and.w	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b088      	sub	sp, #32
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_SPI_Transmit+0x22>
 800277c:	2302      	movs	r3, #2
 800277e:	e126      	b.n	80029ce <HAL_SPI_Transmit+0x270>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002788:	f7fe fec0 	bl	800150c <HAL_GetTick>
 800278c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800279e:	2302      	movs	r3, #2
 80027a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027a2:	e10b      	b.n	80029bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_Transmit+0x52>
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027b4:	e102      	b.n	80029bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2203      	movs	r2, #3
 80027ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	88fa      	ldrh	r2, [r7, #6]
 80027ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fc:	d10f      	bne.n	800281e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d007      	beq.n	800283c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002844:	d14b      	bne.n	80028de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_SPI_Transmit+0xf6>
 800284e:	8afb      	ldrh	r3, [r7, #22]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d13e      	bne.n	80028d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002878:	e02b      	b.n	80028d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b02      	cmp	r3, #2
 8002886:	d112      	bne.n	80028ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	881a      	ldrh	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	1c9a      	adds	r2, r3, #2
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80028ac:	e011      	b.n	80028d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ae:	f7fe fe2d 	bl	800150c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d803      	bhi.n	80028c6 <HAL_SPI_Transmit+0x168>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d102      	bne.n	80028cc <HAL_SPI_Transmit+0x16e>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028d0:	e074      	b.n	80029bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ce      	bne.n	800287a <HAL_SPI_Transmit+0x11c>
 80028dc:	e04c      	b.n	8002978 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_SPI_Transmit+0x18e>
 80028e6:	8afb      	ldrh	r3, [r7, #22]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d140      	bne.n	800296e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	7812      	ldrb	r2, [r2, #0]
 80028f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002912:	e02c      	b.n	800296e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	d113      	bne.n	800294a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	330c      	adds	r3, #12
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	86da      	strh	r2, [r3, #54]	; 0x36
 8002948:	e011      	b.n	800296e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800294a:	f7fe fddf 	bl	800150c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d803      	bhi.n	8002962 <HAL_SPI_Transmit+0x204>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d102      	bne.n	8002968 <HAL_SPI_Transmit+0x20a>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800296c:	e026      	b.n	80029bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1cd      	bne.n	8002914 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fbcb 	bl	8003118 <SPI_EndRxTxTransaction>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e000      	b.n	80029bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80029ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b088      	sub	sp, #32
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f2:	d112      	bne.n	8002a1a <HAL_SPI_Receive+0x44>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10e      	bne.n	8002a1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2204      	movs	r2, #4
 8002a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f8f1 	bl	8002bf8 <HAL_SPI_TransmitReceive>
 8002a16:	4603      	mov	r3, r0
 8002a18:	e0ea      	b.n	8002bf0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_SPI_Receive+0x52>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e0e3      	b.n	8002bf0 <HAL_SPI_Receive+0x21a>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a30:	f7fe fd6c 	bl	800150c <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d002      	beq.n	8002a48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
 8002a44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a46:	e0ca      	b.n	8002bde <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_SPI_Receive+0x7e>
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a58:	e0c1      	b.n	8002bde <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b40      	cmp	r3, #64	; 0x40
 8002ace:	d007      	beq.n	8002ae0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d162      	bne.n	8002bae <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ae8:	e02e      	b.n	8002b48 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d115      	bne.n	8002b24 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f103 020c 	add.w	r2, r3, #12
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b22:	e011      	b.n	8002b48 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b24:	f7fe fcf2 	bl	800150c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d803      	bhi.n	8002b3c <HAL_SPI_Receive+0x166>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d102      	bne.n	8002b42 <HAL_SPI_Receive+0x16c>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d102      	bne.n	8002b48 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b46:	e04a      	b.n	8002bde <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1cb      	bne.n	8002aea <HAL_SPI_Receive+0x114>
 8002b52:	e031      	b.n	8002bb8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d113      	bne.n	8002b8a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	1c9a      	adds	r2, r3, #2
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b88:	e011      	b.n	8002bae <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b8a:	f7fe fcbf 	bl	800150c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d803      	bhi.n	8002ba2 <HAL_SPI_Receive+0x1cc>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d102      	bne.n	8002ba8 <HAL_SPI_Receive+0x1d2>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002bac:	e017      	b.n	8002bde <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1cd      	bne.n	8002b54 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fa45 	bl	800304c <SPI_EndRxTransaction>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
 8002bda:	e000      	b.n	8002bde <HAL_SPI_Receive+0x208>
  }

error :
 8002bdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08c      	sub	sp, #48	; 0x30
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c06:	2301      	movs	r3, #1
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_SPI_TransmitReceive+0x26>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e18a      	b.n	8002f34 <HAL_SPI_TransmitReceive+0x33c>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c26:	f7fe fc71 	bl	800150c <HAL_GetTick>
 8002c2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d00f      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x70>
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c4e:	d107      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <HAL_SPI_TransmitReceive+0x68>
 8002c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d003      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c60:	2302      	movs	r3, #2
 8002c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c66:	e15b      	b.n	8002f20 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x82>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x82>
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c80:	e14e      	b.n	8002f20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d003      	beq.n	8002c96 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2205      	movs	r2, #5
 8002c92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	887a      	ldrh	r2, [r7, #2]
 8002ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	887a      	ldrh	r2, [r7, #2]
 8002cbe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d007      	beq.n	8002cea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf2:	d178      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_SPI_TransmitReceive+0x10a>
 8002cfc:	8b7b      	ldrh	r3, [r7, #26]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d166      	bne.n	8002dd0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	881a      	ldrh	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	1c9a      	adds	r2, r3, #2
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d26:	e053      	b.n	8002dd0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d11b      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x176>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d016      	beq.n	8002d6e <HAL_SPI_TransmitReceive+0x176>
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d113      	bne.n	8002d6e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	881a      	ldrh	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	1c9a      	adds	r2, r3, #2
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d119      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x1b8>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d014      	beq.n	8002db0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	b292      	uxth	r2, r2
 8002d92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	1c9a      	adds	r2, r3, #2
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002dac:	2301      	movs	r3, #1
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002db0:	f7fe fbac 	bl	800150c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d807      	bhi.n	8002dd0 <HAL_SPI_TransmitReceive+0x1d8>
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d003      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dce:	e0a7      	b.n	8002f20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1a6      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x130>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1a1      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x130>
 8002de4:	e07c      	b.n	8002ee0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x1fc>
 8002dee:	8b7b      	ldrh	r3, [r7, #26]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d16b      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	7812      	ldrb	r2, [r2, #0]
 8002e00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e1a:	e057      	b.n	8002ecc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d11c      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x26c>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x26c>
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d114      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	330c      	adds	r3, #12
 8002e44:	7812      	ldrb	r2, [r2, #0]
 8002e46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d119      	bne.n	8002ea6 <HAL_SPI_TransmitReceive+0x2ae>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d014      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ea6:	f7fe fb31 	bl	800150c <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d803      	bhi.n	8002ebe <HAL_SPI_TransmitReceive+0x2c6>
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d102      	bne.n	8002ec4 <HAL_SPI_TransmitReceive+0x2cc>
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002eca:	e029      	b.n	8002f20 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1a2      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x224>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d19d      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f917 	bl	8003118 <SPI_EndRxTxTransaction>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002efc:	e010      	b.n	8002f20 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10b      	bne.n	8002f1e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	e000      	b.n	8002f20 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3730      	adds	r7, #48	; 0x30
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f4c:	f7fe fade 	bl	800150c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f5c:	f7fe fad6 	bl	800150c <HAL_GetTick>
 8002f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f62:	4b39      	ldr	r3, [pc, #228]	; (8003048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	015b      	lsls	r3, r3, #5
 8002f68:	0d1b      	lsrs	r3, r3, #20
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f72:	e054      	b.n	800301e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d050      	beq.n	800301e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f7c:	f7fe fac6 	bl	800150c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d902      	bls.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d13d      	bne.n	800300e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002faa:	d111      	bne.n	8002fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb4:	d004      	beq.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbe:	d107      	bne.n	8002fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd8:	d10f      	bne.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e017      	b.n	800303e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3b01      	subs	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d19b      	bne.n	8002f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003060:	d111      	bne.n	8003086 <SPI_EndRxTransaction+0x3a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306a:	d004      	beq.n	8003076 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003074:	d107      	bne.n	8003086 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003084:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308e:	d12a      	bne.n	80030e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003098:	d012      	beq.n	80030c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2180      	movs	r1, #128	; 0x80
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff ff49 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d02d      	beq.n	800310c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e026      	b.n	800310e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2101      	movs	r1, #1
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff ff36 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01a      	beq.n	800310c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e013      	b.n	800310e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2101      	movs	r1, #1
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff ff23 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e000      	b.n	800310e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <SPI_EndRxTxTransaction+0x7c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <SPI_EndRxTxTransaction+0x80>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0d5b      	lsrs	r3, r3, #21
 8003130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003142:	d112      	bne.n	800316a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	2180      	movs	r1, #128	; 0x80
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff fef4 	bl	8002f3c <SPI_WaitFlagStateUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e00f      	b.n	800318a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3b01      	subs	r3, #1
 8003174:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d0f2      	beq.n	800316a <SPI_EndRxTxTransaction+0x52>
 8003184:	e000      	b.n	8003188 <SPI_EndRxTxTransaction+0x70>
        break;
 8003186:	bf00      	nop
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000
 8003198:	165e9f81 	.word	0x165e9f81

0800319c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e03f      	b.n	800322e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f83e 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f829 	bl	8003238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4313      	orrs	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003278:	f023 030c 	bic.w	r3, r3, #12
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	430b      	orrs	r3, r1
 8003284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a55      	ldr	r2, [pc, #340]	; (80033f8 <UART_SetConfig+0x1c0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d103      	bne.n	80032ae <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032a6:	f7ff f95d 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	e002      	b.n	80032b4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032ae:	f7ff f945 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 80032b2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032bc:	d14c      	bne.n	8003358 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009a      	lsls	r2, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	4a49      	ldr	r2, [pc, #292]	; (80033fc <UART_SetConfig+0x1c4>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	0119      	lsls	r1, r3, #4
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	009a      	lsls	r2, r3, #2
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x1c4>)
 80032f6:	fba3 0302 	umull	r0, r3, r3, r2
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2064      	movs	r0, #100	; 0x64
 80032fe:	fb00 f303 	mul.w	r3, r0, r3
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	3332      	adds	r3, #50	; 0x32
 8003308:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <UART_SetConfig+0x1c4>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003316:	4419      	add	r1, r3
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	009a      	lsls	r2, r3, #2
 8003322:	441a      	add	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fbb2 f2f3 	udiv	r2, r2, r3
 800332e:	4b33      	ldr	r3, [pc, #204]	; (80033fc <UART_SetConfig+0x1c4>)
 8003330:	fba3 0302 	umull	r0, r3, r3, r2
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	2064      	movs	r0, #100	; 0x64
 8003338:	fb00 f303 	mul.w	r3, r0, r3
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	3332      	adds	r3, #50	; 0x32
 8003342:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <UART_SetConfig+0x1c4>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	f003 0207 	and.w	r2, r3, #7
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	440a      	add	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003356:	e04a      	b.n	80033ee <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	009a      	lsls	r2, r3, #2
 8003362:	441a      	add	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <UART_SetConfig+0x1c4>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	0119      	lsls	r1, r3, #4
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	009a      	lsls	r2, r3, #2
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	fbb2 f2f3 	udiv	r2, r2, r3
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <UART_SetConfig+0x1c4>)
 8003390:	fba3 0302 	umull	r0, r3, r3, r2
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2064      	movs	r0, #100	; 0x64
 8003398:	fb00 f303 	mul.w	r3, r0, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	3332      	adds	r3, #50	; 0x32
 80033a2:	4a16      	ldr	r2, [pc, #88]	; (80033fc <UART_SetConfig+0x1c4>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ae:	4419      	add	r1, r3
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009a      	lsls	r2, r3, #2
 80033ba:	441a      	add	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <UART_SetConfig+0x1c4>)
 80033c8:	fba3 0302 	umull	r0, r3, r3, r2
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	2064      	movs	r0, #100	; 0x64
 80033d0:	fb00 f303 	mul.w	r3, r0, r3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	3332      	adds	r3, #50	; 0x32
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <UART_SetConfig+0x1c4>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	440a      	add	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40013800 	.word	0x40013800
 80033fc:	51eb851f 	.word	0x51eb851f

08003400 <__errno>:
 8003400:	4b01      	ldr	r3, [pc, #4]	; (8003408 <__errno+0x8>)
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	2000000c 	.word	0x2000000c

0800340c <__libc_init_array>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	2600      	movs	r6, #0
 8003410:	4d0c      	ldr	r5, [pc, #48]	; (8003444 <__libc_init_array+0x38>)
 8003412:	4c0d      	ldr	r4, [pc, #52]	; (8003448 <__libc_init_array+0x3c>)
 8003414:	1b64      	subs	r4, r4, r5
 8003416:	10a4      	asrs	r4, r4, #2
 8003418:	42a6      	cmp	r6, r4
 800341a:	d109      	bne.n	8003430 <__libc_init_array+0x24>
 800341c:	f000 fc5c 	bl	8003cd8 <_init>
 8003420:	2600      	movs	r6, #0
 8003422:	4d0a      	ldr	r5, [pc, #40]	; (800344c <__libc_init_array+0x40>)
 8003424:	4c0a      	ldr	r4, [pc, #40]	; (8003450 <__libc_init_array+0x44>)
 8003426:	1b64      	subs	r4, r4, r5
 8003428:	10a4      	asrs	r4, r4, #2
 800342a:	42a6      	cmp	r6, r4
 800342c:	d105      	bne.n	800343a <__libc_init_array+0x2e>
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	f855 3b04 	ldr.w	r3, [r5], #4
 8003434:	4798      	blx	r3
 8003436:	3601      	adds	r6, #1
 8003438:	e7ee      	b.n	8003418 <__libc_init_array+0xc>
 800343a:	f855 3b04 	ldr.w	r3, [r5], #4
 800343e:	4798      	blx	r3
 8003440:	3601      	adds	r6, #1
 8003442:	e7f2      	b.n	800342a <__libc_init_array+0x1e>
 8003444:	08003d60 	.word	0x08003d60
 8003448:	08003d60 	.word	0x08003d60
 800344c:	08003d60 	.word	0x08003d60
 8003450:	08003d64 	.word	0x08003d64

08003454 <memcpy>:
 8003454:	440a      	add	r2, r1
 8003456:	4291      	cmp	r1, r2
 8003458:	f100 33ff 	add.w	r3, r0, #4294967295
 800345c:	d100      	bne.n	8003460 <memcpy+0xc>
 800345e:	4770      	bx	lr
 8003460:	b510      	push	{r4, lr}
 8003462:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003466:	4291      	cmp	r1, r2
 8003468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800346c:	d1f9      	bne.n	8003462 <memcpy+0xe>
 800346e:	bd10      	pop	{r4, pc}

08003470 <memset>:
 8003470:	4603      	mov	r3, r0
 8003472:	4402      	add	r2, r0
 8003474:	4293      	cmp	r3, r2
 8003476:	d100      	bne.n	800347a <memset+0xa>
 8003478:	4770      	bx	lr
 800347a:	f803 1b01 	strb.w	r1, [r3], #1
 800347e:	e7f9      	b.n	8003474 <memset+0x4>

08003480 <siprintf>:
 8003480:	b40e      	push	{r1, r2, r3}
 8003482:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003486:	b500      	push	{lr}
 8003488:	b09c      	sub	sp, #112	; 0x70
 800348a:	ab1d      	add	r3, sp, #116	; 0x74
 800348c:	9002      	str	r0, [sp, #8]
 800348e:	9006      	str	r0, [sp, #24]
 8003490:	9107      	str	r1, [sp, #28]
 8003492:	9104      	str	r1, [sp, #16]
 8003494:	4808      	ldr	r0, [pc, #32]	; (80034b8 <siprintf+0x38>)
 8003496:	4909      	ldr	r1, [pc, #36]	; (80034bc <siprintf+0x3c>)
 8003498:	f853 2b04 	ldr.w	r2, [r3], #4
 800349c:	9105      	str	r1, [sp, #20]
 800349e:	6800      	ldr	r0, [r0, #0]
 80034a0:	a902      	add	r1, sp, #8
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	f000 f868 	bl	8003578 <_svfiprintf_r>
 80034a8:	2200      	movs	r2, #0
 80034aa:	9b02      	ldr	r3, [sp, #8]
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	b01c      	add	sp, #112	; 0x70
 80034b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034b4:	b003      	add	sp, #12
 80034b6:	4770      	bx	lr
 80034b8:	2000000c 	.word	0x2000000c
 80034bc:	ffff0208 	.word	0xffff0208

080034c0 <__ssputs_r>:
 80034c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c4:	688e      	ldr	r6, [r1, #8]
 80034c6:	4682      	mov	sl, r0
 80034c8:	429e      	cmp	r6, r3
 80034ca:	460c      	mov	r4, r1
 80034cc:	4690      	mov	r8, r2
 80034ce:	461f      	mov	r7, r3
 80034d0:	d838      	bhi.n	8003544 <__ssputs_r+0x84>
 80034d2:	898a      	ldrh	r2, [r1, #12]
 80034d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034d8:	d032      	beq.n	8003540 <__ssputs_r+0x80>
 80034da:	6825      	ldr	r5, [r4, #0]
 80034dc:	6909      	ldr	r1, [r1, #16]
 80034de:	3301      	adds	r3, #1
 80034e0:	eba5 0901 	sub.w	r9, r5, r1
 80034e4:	6965      	ldr	r5, [r4, #20]
 80034e6:	444b      	add	r3, r9
 80034e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034f0:	106d      	asrs	r5, r5, #1
 80034f2:	429d      	cmp	r5, r3
 80034f4:	bf38      	it	cc
 80034f6:	461d      	movcc	r5, r3
 80034f8:	0553      	lsls	r3, r2, #21
 80034fa:	d531      	bpl.n	8003560 <__ssputs_r+0xa0>
 80034fc:	4629      	mov	r1, r5
 80034fe:	f000 fb45 	bl	8003b8c <_malloc_r>
 8003502:	4606      	mov	r6, r0
 8003504:	b950      	cbnz	r0, 800351c <__ssputs_r+0x5c>
 8003506:	230c      	movs	r3, #12
 8003508:	f04f 30ff 	mov.w	r0, #4294967295
 800350c:	f8ca 3000 	str.w	r3, [sl]
 8003510:	89a3      	ldrh	r3, [r4, #12]
 8003512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003516:	81a3      	strh	r3, [r4, #12]
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	464a      	mov	r2, r9
 800351e:	6921      	ldr	r1, [r4, #16]
 8003520:	f7ff ff98 	bl	8003454 <memcpy>
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800352a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352e:	81a3      	strh	r3, [r4, #12]
 8003530:	6126      	str	r6, [r4, #16]
 8003532:	444e      	add	r6, r9
 8003534:	6026      	str	r6, [r4, #0]
 8003536:	463e      	mov	r6, r7
 8003538:	6165      	str	r5, [r4, #20]
 800353a:	eba5 0509 	sub.w	r5, r5, r9
 800353e:	60a5      	str	r5, [r4, #8]
 8003540:	42be      	cmp	r6, r7
 8003542:	d900      	bls.n	8003546 <__ssputs_r+0x86>
 8003544:	463e      	mov	r6, r7
 8003546:	4632      	mov	r2, r6
 8003548:	4641      	mov	r1, r8
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	f000 fab8 	bl	8003ac0 <memmove>
 8003550:	68a3      	ldr	r3, [r4, #8]
 8003552:	6822      	ldr	r2, [r4, #0]
 8003554:	1b9b      	subs	r3, r3, r6
 8003556:	4432      	add	r2, r6
 8003558:	2000      	movs	r0, #0
 800355a:	60a3      	str	r3, [r4, #8]
 800355c:	6022      	str	r2, [r4, #0]
 800355e:	e7db      	b.n	8003518 <__ssputs_r+0x58>
 8003560:	462a      	mov	r2, r5
 8003562:	f000 fb6d 	bl	8003c40 <_realloc_r>
 8003566:	4606      	mov	r6, r0
 8003568:	2800      	cmp	r0, #0
 800356a:	d1e1      	bne.n	8003530 <__ssputs_r+0x70>
 800356c:	4650      	mov	r0, sl
 800356e:	6921      	ldr	r1, [r4, #16]
 8003570:	f000 fac0 	bl	8003af4 <_free_r>
 8003574:	e7c7      	b.n	8003506 <__ssputs_r+0x46>
	...

08003578 <_svfiprintf_r>:
 8003578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357c:	4698      	mov	r8, r3
 800357e:	898b      	ldrh	r3, [r1, #12]
 8003580:	4607      	mov	r7, r0
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	460d      	mov	r5, r1
 8003586:	4614      	mov	r4, r2
 8003588:	b09d      	sub	sp, #116	; 0x74
 800358a:	d50e      	bpl.n	80035aa <_svfiprintf_r+0x32>
 800358c:	690b      	ldr	r3, [r1, #16]
 800358e:	b963      	cbnz	r3, 80035aa <_svfiprintf_r+0x32>
 8003590:	2140      	movs	r1, #64	; 0x40
 8003592:	f000 fafb 	bl	8003b8c <_malloc_r>
 8003596:	6028      	str	r0, [r5, #0]
 8003598:	6128      	str	r0, [r5, #16]
 800359a:	b920      	cbnz	r0, 80035a6 <_svfiprintf_r+0x2e>
 800359c:	230c      	movs	r3, #12
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	e0d1      	b.n	800374a <_svfiprintf_r+0x1d2>
 80035a6:	2340      	movs	r3, #64	; 0x40
 80035a8:	616b      	str	r3, [r5, #20]
 80035aa:	2300      	movs	r3, #0
 80035ac:	9309      	str	r3, [sp, #36]	; 0x24
 80035ae:	2320      	movs	r3, #32
 80035b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035b4:	2330      	movs	r3, #48	; 0x30
 80035b6:	f04f 0901 	mov.w	r9, #1
 80035ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80035be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003764 <_svfiprintf_r+0x1ec>
 80035c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c6:	4623      	mov	r3, r4
 80035c8:	469a      	mov	sl, r3
 80035ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ce:	b10a      	cbz	r2, 80035d4 <_svfiprintf_r+0x5c>
 80035d0:	2a25      	cmp	r2, #37	; 0x25
 80035d2:	d1f9      	bne.n	80035c8 <_svfiprintf_r+0x50>
 80035d4:	ebba 0b04 	subs.w	fp, sl, r4
 80035d8:	d00b      	beq.n	80035f2 <_svfiprintf_r+0x7a>
 80035da:	465b      	mov	r3, fp
 80035dc:	4622      	mov	r2, r4
 80035de:	4629      	mov	r1, r5
 80035e0:	4638      	mov	r0, r7
 80035e2:	f7ff ff6d 	bl	80034c0 <__ssputs_r>
 80035e6:	3001      	adds	r0, #1
 80035e8:	f000 80aa 	beq.w	8003740 <_svfiprintf_r+0x1c8>
 80035ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035ee:	445a      	add	r2, fp
 80035f0:	9209      	str	r2, [sp, #36]	; 0x24
 80035f2:	f89a 3000 	ldrb.w	r3, [sl]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80a2 	beq.w	8003740 <_svfiprintf_r+0x1c8>
 80035fc:	2300      	movs	r3, #0
 80035fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003606:	f10a 0a01 	add.w	sl, sl, #1
 800360a:	9304      	str	r3, [sp, #16]
 800360c:	9307      	str	r3, [sp, #28]
 800360e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003612:	931a      	str	r3, [sp, #104]	; 0x68
 8003614:	4654      	mov	r4, sl
 8003616:	2205      	movs	r2, #5
 8003618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361c:	4851      	ldr	r0, [pc, #324]	; (8003764 <_svfiprintf_r+0x1ec>)
 800361e:	f000 fa41 	bl	8003aa4 <memchr>
 8003622:	9a04      	ldr	r2, [sp, #16]
 8003624:	b9d8      	cbnz	r0, 800365e <_svfiprintf_r+0xe6>
 8003626:	06d0      	lsls	r0, r2, #27
 8003628:	bf44      	itt	mi
 800362a:	2320      	movmi	r3, #32
 800362c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003630:	0711      	lsls	r1, r2, #28
 8003632:	bf44      	itt	mi
 8003634:	232b      	movmi	r3, #43	; 0x2b
 8003636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800363a:	f89a 3000 	ldrb.w	r3, [sl]
 800363e:	2b2a      	cmp	r3, #42	; 0x2a
 8003640:	d015      	beq.n	800366e <_svfiprintf_r+0xf6>
 8003642:	4654      	mov	r4, sl
 8003644:	2000      	movs	r0, #0
 8003646:	f04f 0c0a 	mov.w	ip, #10
 800364a:	9a07      	ldr	r2, [sp, #28]
 800364c:	4621      	mov	r1, r4
 800364e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003652:	3b30      	subs	r3, #48	; 0x30
 8003654:	2b09      	cmp	r3, #9
 8003656:	d94e      	bls.n	80036f6 <_svfiprintf_r+0x17e>
 8003658:	b1b0      	cbz	r0, 8003688 <_svfiprintf_r+0x110>
 800365a:	9207      	str	r2, [sp, #28]
 800365c:	e014      	b.n	8003688 <_svfiprintf_r+0x110>
 800365e:	eba0 0308 	sub.w	r3, r0, r8
 8003662:	fa09 f303 	lsl.w	r3, r9, r3
 8003666:	4313      	orrs	r3, r2
 8003668:	46a2      	mov	sl, r4
 800366a:	9304      	str	r3, [sp, #16]
 800366c:	e7d2      	b.n	8003614 <_svfiprintf_r+0x9c>
 800366e:	9b03      	ldr	r3, [sp, #12]
 8003670:	1d19      	adds	r1, r3, #4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	9103      	str	r1, [sp, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	bfbb      	ittet	lt
 800367a:	425b      	neglt	r3, r3
 800367c:	f042 0202 	orrlt.w	r2, r2, #2
 8003680:	9307      	strge	r3, [sp, #28]
 8003682:	9307      	strlt	r3, [sp, #28]
 8003684:	bfb8      	it	lt
 8003686:	9204      	strlt	r2, [sp, #16]
 8003688:	7823      	ldrb	r3, [r4, #0]
 800368a:	2b2e      	cmp	r3, #46	; 0x2e
 800368c:	d10c      	bne.n	80036a8 <_svfiprintf_r+0x130>
 800368e:	7863      	ldrb	r3, [r4, #1]
 8003690:	2b2a      	cmp	r3, #42	; 0x2a
 8003692:	d135      	bne.n	8003700 <_svfiprintf_r+0x188>
 8003694:	9b03      	ldr	r3, [sp, #12]
 8003696:	3402      	adds	r4, #2
 8003698:	1d1a      	adds	r2, r3, #4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	9203      	str	r2, [sp, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bfb8      	it	lt
 80036a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80036a6:	9305      	str	r3, [sp, #20]
 80036a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003774 <_svfiprintf_r+0x1fc>
 80036ac:	2203      	movs	r2, #3
 80036ae:	4650      	mov	r0, sl
 80036b0:	7821      	ldrb	r1, [r4, #0]
 80036b2:	f000 f9f7 	bl	8003aa4 <memchr>
 80036b6:	b140      	cbz	r0, 80036ca <_svfiprintf_r+0x152>
 80036b8:	2340      	movs	r3, #64	; 0x40
 80036ba:	eba0 000a 	sub.w	r0, r0, sl
 80036be:	fa03 f000 	lsl.w	r0, r3, r0
 80036c2:	9b04      	ldr	r3, [sp, #16]
 80036c4:	3401      	adds	r4, #1
 80036c6:	4303      	orrs	r3, r0
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ce:	2206      	movs	r2, #6
 80036d0:	4825      	ldr	r0, [pc, #148]	; (8003768 <_svfiprintf_r+0x1f0>)
 80036d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d6:	f000 f9e5 	bl	8003aa4 <memchr>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d038      	beq.n	8003750 <_svfiprintf_r+0x1d8>
 80036de:	4b23      	ldr	r3, [pc, #140]	; (800376c <_svfiprintf_r+0x1f4>)
 80036e0:	bb1b      	cbnz	r3, 800372a <_svfiprintf_r+0x1b2>
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	3307      	adds	r3, #7
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	3308      	adds	r3, #8
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f0:	4433      	add	r3, r6
 80036f2:	9309      	str	r3, [sp, #36]	; 0x24
 80036f4:	e767      	b.n	80035c6 <_svfiprintf_r+0x4e>
 80036f6:	460c      	mov	r4, r1
 80036f8:	2001      	movs	r0, #1
 80036fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80036fe:	e7a5      	b.n	800364c <_svfiprintf_r+0xd4>
 8003700:	2300      	movs	r3, #0
 8003702:	f04f 0c0a 	mov.w	ip, #10
 8003706:	4619      	mov	r1, r3
 8003708:	3401      	adds	r4, #1
 800370a:	9305      	str	r3, [sp, #20]
 800370c:	4620      	mov	r0, r4
 800370e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003712:	3a30      	subs	r2, #48	; 0x30
 8003714:	2a09      	cmp	r2, #9
 8003716:	d903      	bls.n	8003720 <_svfiprintf_r+0x1a8>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0c5      	beq.n	80036a8 <_svfiprintf_r+0x130>
 800371c:	9105      	str	r1, [sp, #20]
 800371e:	e7c3      	b.n	80036a8 <_svfiprintf_r+0x130>
 8003720:	4604      	mov	r4, r0
 8003722:	2301      	movs	r3, #1
 8003724:	fb0c 2101 	mla	r1, ip, r1, r2
 8003728:	e7f0      	b.n	800370c <_svfiprintf_r+0x194>
 800372a:	ab03      	add	r3, sp, #12
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	462a      	mov	r2, r5
 8003730:	4638      	mov	r0, r7
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <_svfiprintf_r+0x1f8>)
 8003734:	a904      	add	r1, sp, #16
 8003736:	f3af 8000 	nop.w
 800373a:	1c42      	adds	r2, r0, #1
 800373c:	4606      	mov	r6, r0
 800373e:	d1d6      	bne.n	80036ee <_svfiprintf_r+0x176>
 8003740:	89ab      	ldrh	r3, [r5, #12]
 8003742:	065b      	lsls	r3, r3, #25
 8003744:	f53f af2c 	bmi.w	80035a0 <_svfiprintf_r+0x28>
 8003748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800374a:	b01d      	add	sp, #116	; 0x74
 800374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003750:	ab03      	add	r3, sp, #12
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	462a      	mov	r2, r5
 8003756:	4638      	mov	r0, r7
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <_svfiprintf_r+0x1f8>)
 800375a:	a904      	add	r1, sp, #16
 800375c:	f000 f87c 	bl	8003858 <_printf_i>
 8003760:	e7eb      	b.n	800373a <_svfiprintf_r+0x1c2>
 8003762:	bf00      	nop
 8003764:	08003d24 	.word	0x08003d24
 8003768:	08003d2e 	.word	0x08003d2e
 800376c:	00000000 	.word	0x00000000
 8003770:	080034c1 	.word	0x080034c1
 8003774:	08003d2a 	.word	0x08003d2a

08003778 <_printf_common>:
 8003778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800377c:	4616      	mov	r6, r2
 800377e:	4699      	mov	r9, r3
 8003780:	688a      	ldr	r2, [r1, #8]
 8003782:	690b      	ldr	r3, [r1, #16]
 8003784:	4607      	mov	r7, r0
 8003786:	4293      	cmp	r3, r2
 8003788:	bfb8      	it	lt
 800378a:	4613      	movlt	r3, r2
 800378c:	6033      	str	r3, [r6, #0]
 800378e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003792:	460c      	mov	r4, r1
 8003794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003798:	b10a      	cbz	r2, 800379e <_printf_common+0x26>
 800379a:	3301      	adds	r3, #1
 800379c:	6033      	str	r3, [r6, #0]
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	0699      	lsls	r1, r3, #26
 80037a2:	bf42      	ittt	mi
 80037a4:	6833      	ldrmi	r3, [r6, #0]
 80037a6:	3302      	addmi	r3, #2
 80037a8:	6033      	strmi	r3, [r6, #0]
 80037aa:	6825      	ldr	r5, [r4, #0]
 80037ac:	f015 0506 	ands.w	r5, r5, #6
 80037b0:	d106      	bne.n	80037c0 <_printf_common+0x48>
 80037b2:	f104 0a19 	add.w	sl, r4, #25
 80037b6:	68e3      	ldr	r3, [r4, #12]
 80037b8:	6832      	ldr	r2, [r6, #0]
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	42ab      	cmp	r3, r5
 80037be:	dc28      	bgt.n	8003812 <_printf_common+0x9a>
 80037c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037c4:	1e13      	subs	r3, r2, #0
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	bf18      	it	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	0692      	lsls	r2, r2, #26
 80037ce:	d42d      	bmi.n	800382c <_printf_common+0xb4>
 80037d0:	4649      	mov	r1, r9
 80037d2:	4638      	mov	r0, r7
 80037d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d8:	47c0      	blx	r8
 80037da:	3001      	adds	r0, #1
 80037dc:	d020      	beq.n	8003820 <_printf_common+0xa8>
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	68e5      	ldr	r5, [r4, #12]
 80037e2:	f003 0306 	and.w	r3, r3, #6
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	bf18      	it	ne
 80037ea:	2500      	movne	r5, #0
 80037ec:	6832      	ldr	r2, [r6, #0]
 80037ee:	f04f 0600 	mov.w	r6, #0
 80037f2:	68a3      	ldr	r3, [r4, #8]
 80037f4:	bf08      	it	eq
 80037f6:	1aad      	subeq	r5, r5, r2
 80037f8:	6922      	ldr	r2, [r4, #16]
 80037fa:	bf08      	it	eq
 80037fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003800:	4293      	cmp	r3, r2
 8003802:	bfc4      	itt	gt
 8003804:	1a9b      	subgt	r3, r3, r2
 8003806:	18ed      	addgt	r5, r5, r3
 8003808:	341a      	adds	r4, #26
 800380a:	42b5      	cmp	r5, r6
 800380c:	d11a      	bne.n	8003844 <_printf_common+0xcc>
 800380e:	2000      	movs	r0, #0
 8003810:	e008      	b.n	8003824 <_printf_common+0xac>
 8003812:	2301      	movs	r3, #1
 8003814:	4652      	mov	r2, sl
 8003816:	4649      	mov	r1, r9
 8003818:	4638      	mov	r0, r7
 800381a:	47c0      	blx	r8
 800381c:	3001      	adds	r0, #1
 800381e:	d103      	bne.n	8003828 <_printf_common+0xb0>
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003828:	3501      	adds	r5, #1
 800382a:	e7c4      	b.n	80037b6 <_printf_common+0x3e>
 800382c:	2030      	movs	r0, #48	; 0x30
 800382e:	18e1      	adds	r1, r4, r3
 8003830:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800383a:	4422      	add	r2, r4
 800383c:	3302      	adds	r3, #2
 800383e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003842:	e7c5      	b.n	80037d0 <_printf_common+0x58>
 8003844:	2301      	movs	r3, #1
 8003846:	4622      	mov	r2, r4
 8003848:	4649      	mov	r1, r9
 800384a:	4638      	mov	r0, r7
 800384c:	47c0      	blx	r8
 800384e:	3001      	adds	r0, #1
 8003850:	d0e6      	beq.n	8003820 <_printf_common+0xa8>
 8003852:	3601      	adds	r6, #1
 8003854:	e7d9      	b.n	800380a <_printf_common+0x92>
	...

08003858 <_printf_i>:
 8003858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	460c      	mov	r4, r1
 800385e:	7e27      	ldrb	r7, [r4, #24]
 8003860:	4691      	mov	r9, r2
 8003862:	2f78      	cmp	r7, #120	; 0x78
 8003864:	4680      	mov	r8, r0
 8003866:	469a      	mov	sl, r3
 8003868:	990c      	ldr	r1, [sp, #48]	; 0x30
 800386a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800386e:	d807      	bhi.n	8003880 <_printf_i+0x28>
 8003870:	2f62      	cmp	r7, #98	; 0x62
 8003872:	d80a      	bhi.n	800388a <_printf_i+0x32>
 8003874:	2f00      	cmp	r7, #0
 8003876:	f000 80d9 	beq.w	8003a2c <_printf_i+0x1d4>
 800387a:	2f58      	cmp	r7, #88	; 0x58
 800387c:	f000 80a4 	beq.w	80039c8 <_printf_i+0x170>
 8003880:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003888:	e03a      	b.n	8003900 <_printf_i+0xa8>
 800388a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800388e:	2b15      	cmp	r3, #21
 8003890:	d8f6      	bhi.n	8003880 <_printf_i+0x28>
 8003892:	a001      	add	r0, pc, #4	; (adr r0, 8003898 <_printf_i+0x40>)
 8003894:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003898:	080038f1 	.word	0x080038f1
 800389c:	08003905 	.word	0x08003905
 80038a0:	08003881 	.word	0x08003881
 80038a4:	08003881 	.word	0x08003881
 80038a8:	08003881 	.word	0x08003881
 80038ac:	08003881 	.word	0x08003881
 80038b0:	08003905 	.word	0x08003905
 80038b4:	08003881 	.word	0x08003881
 80038b8:	08003881 	.word	0x08003881
 80038bc:	08003881 	.word	0x08003881
 80038c0:	08003881 	.word	0x08003881
 80038c4:	08003a13 	.word	0x08003a13
 80038c8:	08003935 	.word	0x08003935
 80038cc:	080039f5 	.word	0x080039f5
 80038d0:	08003881 	.word	0x08003881
 80038d4:	08003881 	.word	0x08003881
 80038d8:	08003a35 	.word	0x08003a35
 80038dc:	08003881 	.word	0x08003881
 80038e0:	08003935 	.word	0x08003935
 80038e4:	08003881 	.word	0x08003881
 80038e8:	08003881 	.word	0x08003881
 80038ec:	080039fd 	.word	0x080039fd
 80038f0:	680b      	ldr	r3, [r1, #0]
 80038f2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038f6:	1d1a      	adds	r2, r3, #4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	600a      	str	r2, [r1, #0]
 80038fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003900:	2301      	movs	r3, #1
 8003902:	e0a4      	b.n	8003a4e <_printf_i+0x1f6>
 8003904:	6825      	ldr	r5, [r4, #0]
 8003906:	6808      	ldr	r0, [r1, #0]
 8003908:	062e      	lsls	r6, r5, #24
 800390a:	f100 0304 	add.w	r3, r0, #4
 800390e:	d50a      	bpl.n	8003926 <_printf_i+0xce>
 8003910:	6805      	ldr	r5, [r0, #0]
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	2d00      	cmp	r5, #0
 8003916:	da03      	bge.n	8003920 <_printf_i+0xc8>
 8003918:	232d      	movs	r3, #45	; 0x2d
 800391a:	426d      	negs	r5, r5
 800391c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003920:	230a      	movs	r3, #10
 8003922:	485e      	ldr	r0, [pc, #376]	; (8003a9c <_printf_i+0x244>)
 8003924:	e019      	b.n	800395a <_printf_i+0x102>
 8003926:	f015 0f40 	tst.w	r5, #64	; 0x40
 800392a:	6805      	ldr	r5, [r0, #0]
 800392c:	600b      	str	r3, [r1, #0]
 800392e:	bf18      	it	ne
 8003930:	b22d      	sxthne	r5, r5
 8003932:	e7ef      	b.n	8003914 <_printf_i+0xbc>
 8003934:	680b      	ldr	r3, [r1, #0]
 8003936:	6825      	ldr	r5, [r4, #0]
 8003938:	1d18      	adds	r0, r3, #4
 800393a:	6008      	str	r0, [r1, #0]
 800393c:	0628      	lsls	r0, r5, #24
 800393e:	d501      	bpl.n	8003944 <_printf_i+0xec>
 8003940:	681d      	ldr	r5, [r3, #0]
 8003942:	e002      	b.n	800394a <_printf_i+0xf2>
 8003944:	0669      	lsls	r1, r5, #25
 8003946:	d5fb      	bpl.n	8003940 <_printf_i+0xe8>
 8003948:	881d      	ldrh	r5, [r3, #0]
 800394a:	2f6f      	cmp	r7, #111	; 0x6f
 800394c:	bf0c      	ite	eq
 800394e:	2308      	moveq	r3, #8
 8003950:	230a      	movne	r3, #10
 8003952:	4852      	ldr	r0, [pc, #328]	; (8003a9c <_printf_i+0x244>)
 8003954:	2100      	movs	r1, #0
 8003956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800395a:	6866      	ldr	r6, [r4, #4]
 800395c:	2e00      	cmp	r6, #0
 800395e:	bfa8      	it	ge
 8003960:	6821      	ldrge	r1, [r4, #0]
 8003962:	60a6      	str	r6, [r4, #8]
 8003964:	bfa4      	itt	ge
 8003966:	f021 0104 	bicge.w	r1, r1, #4
 800396a:	6021      	strge	r1, [r4, #0]
 800396c:	b90d      	cbnz	r5, 8003972 <_printf_i+0x11a>
 800396e:	2e00      	cmp	r6, #0
 8003970:	d04d      	beq.n	8003a0e <_printf_i+0x1b6>
 8003972:	4616      	mov	r6, r2
 8003974:	fbb5 f1f3 	udiv	r1, r5, r3
 8003978:	fb03 5711 	mls	r7, r3, r1, r5
 800397c:	5dc7      	ldrb	r7, [r0, r7]
 800397e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003982:	462f      	mov	r7, r5
 8003984:	42bb      	cmp	r3, r7
 8003986:	460d      	mov	r5, r1
 8003988:	d9f4      	bls.n	8003974 <_printf_i+0x11c>
 800398a:	2b08      	cmp	r3, #8
 800398c:	d10b      	bne.n	80039a6 <_printf_i+0x14e>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	07df      	lsls	r7, r3, #31
 8003992:	d508      	bpl.n	80039a6 <_printf_i+0x14e>
 8003994:	6923      	ldr	r3, [r4, #16]
 8003996:	6861      	ldr	r1, [r4, #4]
 8003998:	4299      	cmp	r1, r3
 800399a:	bfde      	ittt	le
 800399c:	2330      	movle	r3, #48	; 0x30
 800399e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039a6:	1b92      	subs	r2, r2, r6
 80039a8:	6122      	str	r2, [r4, #16]
 80039aa:	464b      	mov	r3, r9
 80039ac:	4621      	mov	r1, r4
 80039ae:	4640      	mov	r0, r8
 80039b0:	f8cd a000 	str.w	sl, [sp]
 80039b4:	aa03      	add	r2, sp, #12
 80039b6:	f7ff fedf 	bl	8003778 <_printf_common>
 80039ba:	3001      	adds	r0, #1
 80039bc:	d14c      	bne.n	8003a58 <_printf_i+0x200>
 80039be:	f04f 30ff 	mov.w	r0, #4294967295
 80039c2:	b004      	add	sp, #16
 80039c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c8:	4834      	ldr	r0, [pc, #208]	; (8003a9c <_printf_i+0x244>)
 80039ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039ce:	680e      	ldr	r6, [r1, #0]
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80039d6:	061f      	lsls	r7, r3, #24
 80039d8:	600e      	str	r6, [r1, #0]
 80039da:	d514      	bpl.n	8003a06 <_printf_i+0x1ae>
 80039dc:	07d9      	lsls	r1, r3, #31
 80039de:	bf44      	itt	mi
 80039e0:	f043 0320 	orrmi.w	r3, r3, #32
 80039e4:	6023      	strmi	r3, [r4, #0]
 80039e6:	b91d      	cbnz	r5, 80039f0 <_printf_i+0x198>
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	f023 0320 	bic.w	r3, r3, #32
 80039ee:	6023      	str	r3, [r4, #0]
 80039f0:	2310      	movs	r3, #16
 80039f2:	e7af      	b.n	8003954 <_printf_i+0xfc>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	f043 0320 	orr.w	r3, r3, #32
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	2378      	movs	r3, #120	; 0x78
 80039fe:	4828      	ldr	r0, [pc, #160]	; (8003aa0 <_printf_i+0x248>)
 8003a00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a04:	e7e3      	b.n	80039ce <_printf_i+0x176>
 8003a06:	065e      	lsls	r6, r3, #25
 8003a08:	bf48      	it	mi
 8003a0a:	b2ad      	uxthmi	r5, r5
 8003a0c:	e7e6      	b.n	80039dc <_printf_i+0x184>
 8003a0e:	4616      	mov	r6, r2
 8003a10:	e7bb      	b.n	800398a <_printf_i+0x132>
 8003a12:	680b      	ldr	r3, [r1, #0]
 8003a14:	6826      	ldr	r6, [r4, #0]
 8003a16:	1d1d      	adds	r5, r3, #4
 8003a18:	6960      	ldr	r0, [r4, #20]
 8003a1a:	600d      	str	r5, [r1, #0]
 8003a1c:	0635      	lsls	r5, r6, #24
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	d501      	bpl.n	8003a26 <_printf_i+0x1ce>
 8003a22:	6018      	str	r0, [r3, #0]
 8003a24:	e002      	b.n	8003a2c <_printf_i+0x1d4>
 8003a26:	0671      	lsls	r1, r6, #25
 8003a28:	d5fb      	bpl.n	8003a22 <_printf_i+0x1ca>
 8003a2a:	8018      	strh	r0, [r3, #0]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	4616      	mov	r6, r2
 8003a30:	6123      	str	r3, [r4, #16]
 8003a32:	e7ba      	b.n	80039aa <_printf_i+0x152>
 8003a34:	680b      	ldr	r3, [r1, #0]
 8003a36:	1d1a      	adds	r2, r3, #4
 8003a38:	600a      	str	r2, [r1, #0]
 8003a3a:	681e      	ldr	r6, [r3, #0]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4630      	mov	r0, r6
 8003a40:	6862      	ldr	r2, [r4, #4]
 8003a42:	f000 f82f 	bl	8003aa4 <memchr>
 8003a46:	b108      	cbz	r0, 8003a4c <_printf_i+0x1f4>
 8003a48:	1b80      	subs	r0, r0, r6
 8003a4a:	6060      	str	r0, [r4, #4]
 8003a4c:	6863      	ldr	r3, [r4, #4]
 8003a4e:	6123      	str	r3, [r4, #16]
 8003a50:	2300      	movs	r3, #0
 8003a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a56:	e7a8      	b.n	80039aa <_printf_i+0x152>
 8003a58:	4632      	mov	r2, r6
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	4640      	mov	r0, r8
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	47d0      	blx	sl
 8003a62:	3001      	adds	r0, #1
 8003a64:	d0ab      	beq.n	80039be <_printf_i+0x166>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	079b      	lsls	r3, r3, #30
 8003a6a:	d413      	bmi.n	8003a94 <_printf_i+0x23c>
 8003a6c:	68e0      	ldr	r0, [r4, #12]
 8003a6e:	9b03      	ldr	r3, [sp, #12]
 8003a70:	4298      	cmp	r0, r3
 8003a72:	bfb8      	it	lt
 8003a74:	4618      	movlt	r0, r3
 8003a76:	e7a4      	b.n	80039c2 <_printf_i+0x16a>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4632      	mov	r2, r6
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	4640      	mov	r0, r8
 8003a80:	47d0      	blx	sl
 8003a82:	3001      	adds	r0, #1
 8003a84:	d09b      	beq.n	80039be <_printf_i+0x166>
 8003a86:	3501      	adds	r5, #1
 8003a88:	68e3      	ldr	r3, [r4, #12]
 8003a8a:	9903      	ldr	r1, [sp, #12]
 8003a8c:	1a5b      	subs	r3, r3, r1
 8003a8e:	42ab      	cmp	r3, r5
 8003a90:	dcf2      	bgt.n	8003a78 <_printf_i+0x220>
 8003a92:	e7eb      	b.n	8003a6c <_printf_i+0x214>
 8003a94:	2500      	movs	r5, #0
 8003a96:	f104 0619 	add.w	r6, r4, #25
 8003a9a:	e7f5      	b.n	8003a88 <_printf_i+0x230>
 8003a9c:	08003d35 	.word	0x08003d35
 8003aa0:	08003d46 	.word	0x08003d46

08003aa4 <memchr>:
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	b2c9      	uxtb	r1, r1
 8003aaa:	4402      	add	r2, r0
 8003aac:	4293      	cmp	r3, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	d101      	bne.n	8003ab6 <memchr+0x12>
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e003      	b.n	8003abe <memchr+0x1a>
 8003ab6:	7804      	ldrb	r4, [r0, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	428c      	cmp	r4, r1
 8003abc:	d1f6      	bne.n	8003aac <memchr+0x8>
 8003abe:	bd10      	pop	{r4, pc}

08003ac0 <memmove>:
 8003ac0:	4288      	cmp	r0, r1
 8003ac2:	b510      	push	{r4, lr}
 8003ac4:	eb01 0402 	add.w	r4, r1, r2
 8003ac8:	d902      	bls.n	8003ad0 <memmove+0x10>
 8003aca:	4284      	cmp	r4, r0
 8003acc:	4623      	mov	r3, r4
 8003ace:	d807      	bhi.n	8003ae0 <memmove+0x20>
 8003ad0:	1e43      	subs	r3, r0, #1
 8003ad2:	42a1      	cmp	r1, r4
 8003ad4:	d008      	beq.n	8003ae8 <memmove+0x28>
 8003ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ade:	e7f8      	b.n	8003ad2 <memmove+0x12>
 8003ae0:	4601      	mov	r1, r0
 8003ae2:	4402      	add	r2, r0
 8003ae4:	428a      	cmp	r2, r1
 8003ae6:	d100      	bne.n	8003aea <memmove+0x2a>
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003af2:	e7f7      	b.n	8003ae4 <memmove+0x24>

08003af4 <_free_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4605      	mov	r5, r0
 8003af8:	2900      	cmp	r1, #0
 8003afa:	d043      	beq.n	8003b84 <_free_r+0x90>
 8003afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b00:	1f0c      	subs	r4, r1, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bfb8      	it	lt
 8003b06:	18e4      	addlt	r4, r4, r3
 8003b08:	f000 f8d0 	bl	8003cac <__malloc_lock>
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <_free_r+0x94>)
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	4610      	mov	r0, r2
 8003b12:	b933      	cbnz	r3, 8003b22 <_free_r+0x2e>
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	6014      	str	r4, [r2, #0]
 8003b18:	4628      	mov	r0, r5
 8003b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b1e:	f000 b8cb 	b.w	8003cb8 <__malloc_unlock>
 8003b22:	42a3      	cmp	r3, r4
 8003b24:	d90a      	bls.n	8003b3c <_free_r+0x48>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	1862      	adds	r2, r4, r1
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bf01      	itttt	eq
 8003b2e:	681a      	ldreq	r2, [r3, #0]
 8003b30:	685b      	ldreq	r3, [r3, #4]
 8003b32:	1852      	addeq	r2, r2, r1
 8003b34:	6022      	streq	r2, [r4, #0]
 8003b36:	6063      	str	r3, [r4, #4]
 8003b38:	6004      	str	r4, [r0, #0]
 8003b3a:	e7ed      	b.n	8003b18 <_free_r+0x24>
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	b10b      	cbz	r3, 8003b46 <_free_r+0x52>
 8003b42:	42a3      	cmp	r3, r4
 8003b44:	d9fa      	bls.n	8003b3c <_free_r+0x48>
 8003b46:	6811      	ldr	r1, [r2, #0]
 8003b48:	1850      	adds	r0, r2, r1
 8003b4a:	42a0      	cmp	r0, r4
 8003b4c:	d10b      	bne.n	8003b66 <_free_r+0x72>
 8003b4e:	6820      	ldr	r0, [r4, #0]
 8003b50:	4401      	add	r1, r0
 8003b52:	1850      	adds	r0, r2, r1
 8003b54:	4283      	cmp	r3, r0
 8003b56:	6011      	str	r1, [r2, #0]
 8003b58:	d1de      	bne.n	8003b18 <_free_r+0x24>
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4401      	add	r1, r0
 8003b60:	6011      	str	r1, [r2, #0]
 8003b62:	6053      	str	r3, [r2, #4]
 8003b64:	e7d8      	b.n	8003b18 <_free_r+0x24>
 8003b66:	d902      	bls.n	8003b6e <_free_r+0x7a>
 8003b68:	230c      	movs	r3, #12
 8003b6a:	602b      	str	r3, [r5, #0]
 8003b6c:	e7d4      	b.n	8003b18 <_free_r+0x24>
 8003b6e:	6820      	ldr	r0, [r4, #0]
 8003b70:	1821      	adds	r1, r4, r0
 8003b72:	428b      	cmp	r3, r1
 8003b74:	bf01      	itttt	eq
 8003b76:	6819      	ldreq	r1, [r3, #0]
 8003b78:	685b      	ldreq	r3, [r3, #4]
 8003b7a:	1809      	addeq	r1, r1, r0
 8003b7c:	6021      	streq	r1, [r4, #0]
 8003b7e:	6063      	str	r3, [r4, #4]
 8003b80:	6054      	str	r4, [r2, #4]
 8003b82:	e7c9      	b.n	8003b18 <_free_r+0x24>
 8003b84:	bd38      	pop	{r3, r4, r5, pc}
 8003b86:	bf00      	nop
 8003b88:	200000cc 	.word	0x200000cc

08003b8c <_malloc_r>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	1ccd      	adds	r5, r1, #3
 8003b90:	f025 0503 	bic.w	r5, r5, #3
 8003b94:	3508      	adds	r5, #8
 8003b96:	2d0c      	cmp	r5, #12
 8003b98:	bf38      	it	cc
 8003b9a:	250c      	movcc	r5, #12
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	4606      	mov	r6, r0
 8003ba0:	db01      	blt.n	8003ba6 <_malloc_r+0x1a>
 8003ba2:	42a9      	cmp	r1, r5
 8003ba4:	d903      	bls.n	8003bae <_malloc_r+0x22>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	6033      	str	r3, [r6, #0]
 8003baa:	2000      	movs	r0, #0
 8003bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bae:	f000 f87d 	bl	8003cac <__malloc_lock>
 8003bb2:	4921      	ldr	r1, [pc, #132]	; (8003c38 <_malloc_r+0xac>)
 8003bb4:	680a      	ldr	r2, [r1, #0]
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	b99c      	cbnz	r4, 8003be2 <_malloc_r+0x56>
 8003bba:	4f20      	ldr	r7, [pc, #128]	; (8003c3c <_malloc_r+0xb0>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	b923      	cbnz	r3, 8003bca <_malloc_r+0x3e>
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f862 	bl	8003c8c <_sbrk_r>
 8003bc8:	6038      	str	r0, [r7, #0]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	4630      	mov	r0, r6
 8003bce:	f000 f85d 	bl	8003c8c <_sbrk_r>
 8003bd2:	1c43      	adds	r3, r0, #1
 8003bd4:	d123      	bne.n	8003c1e <_malloc_r+0x92>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	4630      	mov	r0, r6
 8003bda:	6033      	str	r3, [r6, #0]
 8003bdc:	f000 f86c 	bl	8003cb8 <__malloc_unlock>
 8003be0:	e7e3      	b.n	8003baa <_malloc_r+0x1e>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	1b5b      	subs	r3, r3, r5
 8003be6:	d417      	bmi.n	8003c18 <_malloc_r+0x8c>
 8003be8:	2b0b      	cmp	r3, #11
 8003bea:	d903      	bls.n	8003bf4 <_malloc_r+0x68>
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	441c      	add	r4, r3
 8003bf0:	6025      	str	r5, [r4, #0]
 8003bf2:	e004      	b.n	8003bfe <_malloc_r+0x72>
 8003bf4:	6863      	ldr	r3, [r4, #4]
 8003bf6:	42a2      	cmp	r2, r4
 8003bf8:	bf0c      	ite	eq
 8003bfa:	600b      	streq	r3, [r1, #0]
 8003bfc:	6053      	strne	r3, [r2, #4]
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f000 f85a 	bl	8003cb8 <__malloc_unlock>
 8003c04:	f104 000b 	add.w	r0, r4, #11
 8003c08:	1d23      	adds	r3, r4, #4
 8003c0a:	f020 0007 	bic.w	r0, r0, #7
 8003c0e:	1ac2      	subs	r2, r0, r3
 8003c10:	d0cc      	beq.n	8003bac <_malloc_r+0x20>
 8003c12:	1a1b      	subs	r3, r3, r0
 8003c14:	50a3      	str	r3, [r4, r2]
 8003c16:	e7c9      	b.n	8003bac <_malloc_r+0x20>
 8003c18:	4622      	mov	r2, r4
 8003c1a:	6864      	ldr	r4, [r4, #4]
 8003c1c:	e7cc      	b.n	8003bb8 <_malloc_r+0x2c>
 8003c1e:	1cc4      	adds	r4, r0, #3
 8003c20:	f024 0403 	bic.w	r4, r4, #3
 8003c24:	42a0      	cmp	r0, r4
 8003c26:	d0e3      	beq.n	8003bf0 <_malloc_r+0x64>
 8003c28:	1a21      	subs	r1, r4, r0
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f000 f82e 	bl	8003c8c <_sbrk_r>
 8003c30:	3001      	adds	r0, #1
 8003c32:	d1dd      	bne.n	8003bf0 <_malloc_r+0x64>
 8003c34:	e7cf      	b.n	8003bd6 <_malloc_r+0x4a>
 8003c36:	bf00      	nop
 8003c38:	200000cc 	.word	0x200000cc
 8003c3c:	200000d0 	.word	0x200000d0

08003c40 <_realloc_r>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	4607      	mov	r7, r0
 8003c44:	4614      	mov	r4, r2
 8003c46:	460e      	mov	r6, r1
 8003c48:	b921      	cbnz	r1, 8003c54 <_realloc_r+0x14>
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c50:	f7ff bf9c 	b.w	8003b8c <_malloc_r>
 8003c54:	b922      	cbnz	r2, 8003c60 <_realloc_r+0x20>
 8003c56:	f7ff ff4d 	bl	8003af4 <_free_r>
 8003c5a:	4625      	mov	r5, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c60:	f000 f830 	bl	8003cc4 <_malloc_usable_size_r>
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d20f      	bcs.n	8003c88 <_realloc_r+0x48>
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	f7ff ff8e 	bl	8003b8c <_malloc_r>
 8003c70:	4605      	mov	r5, r0
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d0f2      	beq.n	8003c5c <_realloc_r+0x1c>
 8003c76:	4631      	mov	r1, r6
 8003c78:	4622      	mov	r2, r4
 8003c7a:	f7ff fbeb 	bl	8003454 <memcpy>
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4638      	mov	r0, r7
 8003c82:	f7ff ff37 	bl	8003af4 <_free_r>
 8003c86:	e7e9      	b.n	8003c5c <_realloc_r+0x1c>
 8003c88:	4635      	mov	r5, r6
 8003c8a:	e7e7      	b.n	8003c5c <_realloc_r+0x1c>

08003c8c <_sbrk_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	2300      	movs	r3, #0
 8003c90:	4d05      	ldr	r5, [pc, #20]	; (8003ca8 <_sbrk_r+0x1c>)
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fd fb72 	bl	8001380 <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk_r+0x1a>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_sbrk_r+0x1a>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	20000174 	.word	0x20000174

08003cac <__malloc_lock>:
 8003cac:	4801      	ldr	r0, [pc, #4]	; (8003cb4 <__malloc_lock+0x8>)
 8003cae:	f000 b811 	b.w	8003cd4 <__retarget_lock_acquire_recursive>
 8003cb2:	bf00      	nop
 8003cb4:	2000017c 	.word	0x2000017c

08003cb8 <__malloc_unlock>:
 8003cb8:	4801      	ldr	r0, [pc, #4]	; (8003cc0 <__malloc_unlock+0x8>)
 8003cba:	f000 b80c 	b.w	8003cd6 <__retarget_lock_release_recursive>
 8003cbe:	bf00      	nop
 8003cc0:	2000017c 	.word	0x2000017c

08003cc4 <_malloc_usable_size_r>:
 8003cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc8:	1f18      	subs	r0, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bfbc      	itt	lt
 8003cce:	580b      	ldrlt	r3, [r1, r0]
 8003cd0:	18c0      	addlt	r0, r0, r3
 8003cd2:	4770      	bx	lr

08003cd4 <__retarget_lock_acquire_recursive>:
 8003cd4:	4770      	bx	lr

08003cd6 <__retarget_lock_release_recursive>:
 8003cd6:	4770      	bx	lr

08003cd8 <_init>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr

08003ce4 <_fini>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr
