
RFM95W_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d34  08002d34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d3c  08002d3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d3c  08002d3c  00012d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002d50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002d50  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075ec  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000156d  00000000  00000000  00027621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00028b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  00029260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c9f  00000000  00000000  00029888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000768a  00000000  00000000  0003f527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086f0d  00000000  00000000  00046bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cdabe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  000cdb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002cf8 	.word	0x08002cf8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002cf8 	.word	0x08002cf8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <RFM95_setNSSPin>:
#include <stdio.h>
#include <math.h>
#include "rfm95.h"
/* Export functions */
static inline void RFM95_setNSSPin(RFM95_HandleTypeDef *const me)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d008      	beq.n	8000494 <RFM95_setNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_SET);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	8bdb      	ldrh	r3, [r3, #30]
 800048a:	2201      	movs	r2, #1
 800048c:	4619      	mov	r1, r3
 800048e:	f001 f8dd 	bl	800164c <HAL_GPIO_WritePin>
 8000492:	e000      	b.n	8000496 <RFM95_setNSSPin+0x22>
		return;
 8000494:	bf00      	nop
}
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <RFM95_clearNSSPin>:

static inline void RFM95_clearNSSPin(RFM95_HandleTypeDef *const me)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d008      	beq.n	80004bc <RFM95_clearNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_RESET);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	8bdb      	ldrh	r3, [r3, #30]
 80004b2:	2200      	movs	r2, #0
 80004b4:	4619      	mov	r1, r3
 80004b6:	f001 f8c9 	bl	800164c <HAL_GPIO_WritePin>
 80004ba:	e000      	b.n	80004be <RFM95_clearNSSPin+0x22>
		return;
 80004bc:	bf00      	nop
}
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <RFM95_writeRegister>:

static WLV_StatusTypeDef RFM95_writeRegister(RFM95_HandleTypeDef *const me,
		uint8_t address, uint8_t data)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
 80004d0:	4613      	mov	r3, r2
 80004d2:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <RFM95_writeRegister+0x1a>
	{
		return WLV_ERROR;
 80004da:	2301      	movs	r3, #1
 80004dc:	e021      	b.n	8000522 <RFM95_writeRegister+0x5e>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff ffdc 	bl	800049c <RFM95_clearNSSPin>
	/* an address byte followed by a data byte is sent for a write access */
	uint8_t txBuffer[2] = { address | 0x80, data };
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	733b      	strb	r3, [r7, #12]
 80004ee:	78bb      	ldrb	r3, [r7, #2]
 80004f0:	737b      	strb	r3, [r7, #13]
//	printf("Write %X to address %x\n", txBuffer[1], txBuffer[0]);
	HAL_StatusTypeDef res = HAL_SPI_Transmit(me->hspi, txBuffer, 2, 100);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6998      	ldr	r0, [r3, #24]
 80004f6:	f107 010c 	add.w	r1, r7, #12
 80004fa:	2364      	movs	r3, #100	; 0x64
 80004fc:	2202      	movs	r2, #2
 80004fe:	f001 feb0 	bl	8002262 <HAL_SPI_Transmit>
 8000502:	4603      	mov	r3, r0
 8000504:	73fb      	strb	r3, [r7, #15]
	/* The NSS pin goes high after the data byte. b*/
	RFM95_setNSSPin(me);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffb4 	bl	8000474 <RFM95_setNSSPin>

	if (res == HAL_OK)
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d101      	bne.n	8000516 <RFM95_writeRegister+0x52>
	{
		return WLV_OK;
 8000512:	2300      	movs	r3, #0
 8000514:	e005      	b.n	8000522 <RFM95_writeRegister+0x5e>
	}
	else if (res == HAL_ERROR)
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d101      	bne.n	8000520 <RFM95_writeRegister+0x5c>
	{
		return WLV_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	e000      	b.n	8000522 <RFM95_writeRegister+0x5e>
	}
	else
	{
		return WLV_TIMEOUT;
 8000520:	2303      	movs	r3, #3
	}
}
 8000522:	4618      	mov	r0, r3
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <RFM95_writeBurstRegister>:

static WLV_StatusTypeDef RFM95_writeBurstRegister(RFM95_HandleTypeDef *const me,
		uint8_t address, uint8_t *pData, uint8_t size)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b086      	sub	sp, #24
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	461a      	mov	r2, r3
 8000536:	460b      	mov	r3, r1
 8000538:	72fb      	strb	r3, [r7, #11]
 800053a:	4613      	mov	r3, r2
 800053c:	72bb      	strb	r3, [r7, #10]
	if (me == NULL)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d101      	bne.n	8000548 <RFM95_writeBurstRegister+0x1e>
	{
		return WLV_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	e041      	b.n	80005cc <RFM95_writeBurstRegister+0xa2>
	}

	HAL_StatusTypeDef res = HAL_OK;
 8000548:	2300      	movs	r3, #0
 800054a:	75fb      	strb	r3, [r7, #23]

	if (size == 1)
 800054c:	7abb      	ldrb	r3, [r7, #10]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d109      	bne.n	8000566 <RFM95_writeBurstRegister+0x3c>
	{
		res = RFM95_writeRegister(me, address, *pData);
 8000552:	7af9      	ldrb	r1, [r7, #11]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f7ff ffb2 	bl	80004c4 <RFM95_writeRegister>
 8000560:	4603      	mov	r3, r0
 8000562:	75fb      	strb	r3, [r7, #23]
 8000564:	e031      	b.n	80005ca <RFM95_writeBurstRegister+0xa0>
	}
	else
	{
		RFM95_clearNSSPin(me);
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f7ff ff98 	bl	800049c <RFM95_clearNSSPin>

		address |= 0x80;
 800056c:	7afb      	ldrb	r3, [r7, #11]
 800056e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000572:	b2db      	uxtb	r3, r3
 8000574:	72fb      	strb	r3, [r7, #11]

		res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6998      	ldr	r0, [r3, #24]
 800057a:	f107 010b 	add.w	r1, r7, #11
 800057e:	2364      	movs	r3, #100	; 0x64
 8000580:	2201      	movs	r2, #1
 8000582:	f001 fe6e 	bl	8002262 <HAL_SPI_Transmit>
 8000586:	4603      	mov	r3, r0
 8000588:	75fb      	strb	r3, [r7, #23]
		if (res == HAL_OK)
 800058a:	7dfb      	ldrb	r3, [r7, #23]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d119      	bne.n	80005c4 <RFM95_writeBurstRegister+0x9a>
		{
			for (size_t i = 0; i < size; i++)
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	e010      	b.n	80005b8 <RFM95_writeBurstRegister+0x8e>
			{
//				printf("Write %X to address %x\n", *pData, address);
				res = HAL_SPI_Transmit(me->hspi, pData++, 1, 100);    //pdata++
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6998      	ldr	r0, [r3, #24]
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	1c4b      	adds	r3, r1, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	2364      	movs	r3, #100	; 0x64
 80005a2:	2201      	movs	r2, #1
 80005a4:	f001 fe5d 	bl	8002262 <HAL_SPI_Transmit>
 80005a8:	4603      	mov	r3, r0
 80005aa:	75fb      	strb	r3, [r7, #23]

				if (res != HAL_OK)
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d107      	bne.n	80005c2 <RFM95_writeBurstRegister+0x98>
			for (size_t i = 0; i < size; i++)
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	3301      	adds	r3, #1
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	7abb      	ldrb	r3, [r7, #10]
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3ea      	bcc.n	8000596 <RFM95_writeBurstRegister+0x6c>
 80005c0:	e000      	b.n	80005c4 <RFM95_writeBurstRegister+0x9a>
				{
					break;
 80005c2:	bf00      	nop
				}
			}
		}

		RFM95_setNSSPin(me);
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ff55 	bl	8000474 <RFM95_setNSSPin>
	}

	return res;
 80005ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <RFM95_readRegister>:

static WLV_StatusTypeDef RFM95_readRegister(RFM95_HandleTypeDef *const me,
		uint8_t address, uint8_t *value)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	460b      	mov	r3, r1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	72fb      	strb	r3, [r7, #11]
	if (me == NULL)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d101      	bne.n	80005ec <RFM95_readRegister+0x18>
	{
		return WLV_ERROR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e025      	b.n	8000638 <RFM95_readRegister+0x64>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 80005ec:	68f8      	ldr	r0, [r7, #12]
 80005ee:	f7ff ff55 	bl	800049c <RFM95_clearNSSPin>

	HAL_StatusTypeDef res = HAL_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	75fb      	strb	r3, [r7, #23]

	/* an address byte is sent */
	res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6998      	ldr	r0, [r3, #24]
 80005fa:	f107 010b 	add.w	r1, r7, #11
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	2201      	movs	r2, #1
 8000602:	f001 fe2e 	bl	8002262 <HAL_SPI_Transmit>
 8000606:	4603      	mov	r3, r0
 8000608:	75fb      	strb	r3, [r7, #23]
	/* and a read byte is received for the read access. */
	res = HAL_SPI_Receive(me->hspi, value, 1, 100);
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6998      	ldr	r0, [r3, #24]
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	2201      	movs	r2, #1
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	f001 ff61 	bl	80024da <HAL_SPI_Receive>
 8000618:	4603      	mov	r3, r0
 800061a:	75fb      	strb	r3, [r7, #23]

	/* The NSS pin goes high after the data byte. b*/
	RFM95_setNSSPin(me);
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f7ff ff29 	bl	8000474 <RFM95_setNSSPin>
//	printf("Read address %x: %x\n ", address, *value);
	if (res == HAL_OK)
 8000622:	7dfb      	ldrb	r3, [r7, #23]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <RFM95_readRegister+0x58>
	{
		return WLV_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	e005      	b.n	8000638 <RFM95_readRegister+0x64>
	}
	else if (res == HAL_ERROR)
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d101      	bne.n	8000636 <RFM95_readRegister+0x62>
	{
		return WLV_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <RFM95_readRegister+0x64>
	}
	else
	{
		return WLV_TIMEOUT;
 8000636:	2303      	movs	r3, #3
	}
}
 8000638:	4618      	mov	r0, r3
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <RFM95_setHeaderMode>:
 * @arg RFLR_MODEMCONFIG1_IMPLICITHEADER_OFF        0x00 // Default
 */

WLV_StatusTypeDef RFM95_setHeaderMode(RFM95_HandleTypeDef *const me,
		uint8_t headerMode)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <RFM95_setHeaderMode+0x16>
	{
		return WLV_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e024      	b.n	80006a0 <RFM95_setHeaderMode+0x60>
	}

	uint8_t rByte = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
	WLV_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 800065e:	f107 030d 	add.w	r3, r7, #13
 8000662:	461a      	mov	r2, r3
 8000664:	211d      	movs	r1, #29
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff ffb4 	bl	80005d4 <RFM95_readRegister>
 800066c:	4603      	mov	r3, r0
 800066e:	73bb      	strb	r3, [r7, #14]

	if (res != WLV_OK)
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <RFM95_setHeaderMode+0x3a>
	{
		return res;
 8000676:	7bbb      	ldrb	r3, [r7, #14]
 8000678:	e012      	b.n	80006a0 <RFM95_setHeaderMode+0x60>
	}

	/* Set the new value of REG_LR_MODEMCONFIG1 register */
	wByte = (uint8_t) (headerMode
			| (rByte & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK));
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b25b      	sxtb	r3, r3
 800067e:	f023 0301 	bic.w	r3, r3, #1
 8000682:	b25a      	sxtb	r2, r3
 8000684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000688:	4313      	orrs	r3, r2
 800068a:	b25b      	sxtb	r3, r3
	wByte = (uint8_t) (headerMode
 800068c:	73fb      	strb	r3, [r7, #15]

	/* Write new value to REG_LR_MODEMCONFIG2 register */
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	461a      	mov	r2, r3
 8000692:	211d      	movs	r1, #29
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ff15 	bl	80004c4 <RFM95_writeRegister>
 800069a:	4603      	mov	r3, r0
 800069c:	73bb      	strb	r3, [r7, #14]

	return res;
 800069e:	7bbb      	ldrb	r3, [r7, #14]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <RFM95_setSpreadingFactor>:
 @arg RFLR_MODEMCONFIG2_SF_11                     0xB0
 @arg RFLR_MODEMCONFIG2_SF_12                     0xC0
 */
WLV_StatusTypeDef RFM95_setSpreadingFactor(RFM95_HandleTypeDef *const me,
		uint8_t SF)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <RFM95_setSpreadingFactor+0x16>
	{
		return WLV_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e09f      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
	}

	me->parent.SF = SF >> 4u;
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	091b      	lsrs	r3, r3, #4
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	711a      	strb	r2, [r3, #4]

	uint8_t rByte = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]
	WLV_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 80006d0:	f107 030d 	add.w	r3, r7, #13
 80006d4:	461a      	mov	r2, r3
 80006d6:	211e      	movs	r1, #30
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff7b 	bl	80005d4 <RFM95_readRegister>
 80006de:	4603      	mov	r3, r0
 80006e0:	73bb      	strb	r3, [r7, #14]
	if (res != WLV_OK)
 80006e2:	7bbb      	ldrb	r3, [r7, #14]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <RFM95_setSpreadingFactor+0x44>
	{
		return WLV_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	e088      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
	}

	/* SF = 6 Is a special use case for the highest data rate transmission possible with the LoRa modem */
	if (SF == RFLR_MODEMCONFIG2_SF_6)
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	2b60      	cmp	r3, #96	; 0x60
 80006f0:	d144      	bne.n	800077c <RFM95_setSpreadingFactor+0xd4>
	{
		/* Set the new value of REG_LR_MODEMCONFIG2 register */
		wByte = (uint8_t) (RFLR_MODEMCONFIG2_SF_6
				| (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 80006f2:	7b7b      	ldrb	r3, [r7, #13]
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000700:	b25b      	sxtb	r3, r3
		wByte = (uint8_t) (RFLR_MODEMCONFIG2_SF_6
 8000702:	73fb      	strb	r3, [r7, #15]

		/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
		res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	461a      	mov	r2, r3
 8000708:	211e      	movs	r1, #30
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff feda 	bl	80004c4 <RFM95_writeRegister>
 8000710:	4603      	mov	r3, r0
 8000712:	73bb      	strb	r3, [r7, #14]

		if (res != WLV_OK)
 8000714:	7bbb      	ldrb	r3, [r7, #14]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <RFM95_setSpreadingFactor+0x76>
		{
			return res;
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	e06f      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
		}

		/* 2. Set the header to implicit mode */
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 800071e:	2101      	movs	r1, #1
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff ff8d 	bl	8000640 <RFM95_setHeaderMode>

		/* 3. Write bit 2-0 of register 0x31 to value "0b101" */
		res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8000726:	f107 030d 	add.w	r3, r7, #13
 800072a:	461a      	mov	r2, r3
 800072c:	2131      	movs	r1, #49	; 0x31
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff50 	bl	80005d4 <RFM95_readRegister>
 8000734:	4603      	mov	r3, r0
 8000736:	73bb      	strb	r3, [r7, #14]
		if (res != WLV_OK)
 8000738:	7bbb      	ldrb	r3, [r7, #14]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <RFM95_setSpreadingFactor+0x9a>
		{
			return WLV_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e05d      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
		}

		wByte = (uint8_t) (RFLR_DETECTIONOPTIMIZE_SF6
				| (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 8000742:	7b7b      	ldrb	r3, [r7, #13]
 8000744:	b25b      	sxtb	r3, r3
 8000746:	f023 0307 	bic.w	r3, r3, #7
 800074a:	b25b      	sxtb	r3, r3
 800074c:	f043 0305 	orr.w	r3, r3, #5
 8000750:	b25b      	sxtb	r3, r3
		wByte = (uint8_t) (RFLR_DETECTIONOPTIMIZE_SF6
 8000752:	73fb      	strb	r3, [r7, #15]

		res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	461a      	mov	r2, r3
 8000758:	2131      	movs	r1, #49	; 0x31
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff feb2 	bl	80004c4 <RFM95_writeRegister>
 8000760:	4603      	mov	r3, r0
 8000762:	73bb      	strb	r3, [r7, #14]

		if (res != WLV_OK)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <RFM95_setSpreadingFactor+0xc6>
		{
			return res;
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	e047      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
		}

		/* 4. Write register address 0x37 to value 0x0C */
		return RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD,
 800076e:	220c      	movs	r2, #12
 8000770:	2137      	movs	r1, #55	; 0x37
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff fea6 	bl	80004c4 <RFM95_writeRegister>
 8000778:	4603      	mov	r3, r0
 800077a:	e040      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
				RFLR_DETECTIONTHRESH_SF6);
	}

	/* else if SF != 6 following below */
	/* 1. Write bit 2-0 of register 0x31 to value "0b101" */
	res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 800077c:	f107 030d 	add.w	r3, r7, #13
 8000780:	461a      	mov	r2, r3
 8000782:	2131      	movs	r1, #49	; 0x31
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff25 	bl	80005d4 <RFM95_readRegister>
 800078a:	4603      	mov	r3, r0
 800078c:	73bb      	strb	r3, [r7, #14]
	if (res != WLV_OK)
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <RFM95_setSpreadingFactor+0xf0>
	{
		return WLV_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	e032      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
	}

	wByte = (uint8_t) (RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12
			| (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 8000798:	7b7b      	ldrb	r3, [r7, #13]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	f023 0307 	bic.w	r3, r3, #7
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	f043 0303 	orr.w	r3, r3, #3
 80007a6:	b25b      	sxtb	r3, r3
	wByte = (uint8_t) (RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12
 80007a8:	73fb      	strb	r3, [r7, #15]

	res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	461a      	mov	r2, r3
 80007ae:	2131      	movs	r1, #49	; 0x31
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe87 	bl	80004c4 <RFM95_writeRegister>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73bb      	strb	r3, [r7, #14]

	if (res != WLV_OK)
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <RFM95_setSpreadingFactor+0x11c>
	{
		return res;
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	e01c      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
	}

	/* 2. Write register address 0x37 to value 0x0C */
	res = RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD,
 80007c4:	220a      	movs	r2, #10
 80007c6:	2137      	movs	r1, #55	; 0x37
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fe7b 	bl	80004c4 <RFM95_writeRegister>
 80007ce:	4603      	mov	r3, r0
 80007d0:	73bb      	strb	r3, [r7, #14]
			RFLR_DETECTIONTHRESH_SF7_TO_SF12);

	if (res != WLV_OK)
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <RFM95_setSpreadingFactor+0x134>
	{
		return res;
 80007d8:	7bbb      	ldrb	r3, [r7, #14]
 80007da:	e010      	b.n	80007fe <RFM95_setSpreadingFactor+0x156>
	}

	/* 3. Write register REG_LR_MODEMCONFIG2 to config SF */
	/* Set the new value of REG_LR_MODEMCONFIG2 register */
	wByte = (uint8_t) (SF | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 80007dc:	7b7b      	ldrb	r3, [r7, #13]
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	f003 030f 	and.w	r3, r3, #15
 80007e4:	b25a      	sxtb	r2, r3
 80007e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	73fb      	strb	r3, [r7, #15]

	/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	461a      	mov	r2, r3
 80007f4:	211e      	movs	r1, #30
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fe64 	bl	80004c4 <RFM95_writeRegister>
 80007fc:	4603      	mov	r3, r0
//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <RFM95_setBandwidth>:
 * Phạm vi băng thông phù hợp với hầu hết các tình huống quy định được đưa ra trong
 * bảng thông số kỹ thuật của modem LoRaTM (xem Phần 2.4.5).
 */

WLV_StatusTypeDef RFM95_setBandwidth(RFM95_HandleTypeDef *const me, uint8_t BW)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b084      	sub	sp, #16
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	460b      	mov	r3, r1
 8000810:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <RFM95_setBandwidth+0x16>
	{
		return WLV_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	e027      	b.n	800086c <RFM95_setBandwidth+0x66>
	}

	me->parent.BW = BW >> 4u;
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	091b      	lsrs	r3, r3, #4
 8000820:	b2da      	uxtb	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	715a      	strb	r2, [r3, #5]

	uint8_t rByte = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
	WLV_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 800082e:	f107 030d 	add.w	r3, r7, #13
 8000832:	461a      	mov	r2, r3
 8000834:	211d      	movs	r1, #29
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fecc 	bl	80005d4 <RFM95_readRegister>
 800083c:	4603      	mov	r3, r0
 800083e:	73bb      	strb	r3, [r7, #14]

	if (res != WLV_OK)
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <RFM95_setBandwidth+0x44>
	{
		return WLV_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e010      	b.n	800086c <RFM95_setBandwidth+0x66>
	}

	wByte = (uint8_t) (BW | (rByte & RFLR_MODEMCONFIG1_BW_MASK));
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	b25b      	sxtb	r3, r3
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	b25a      	sxtb	r2, r3
 8000854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	461a      	mov	r2, r3
 8000862:	211d      	movs	r1, #29
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff fe2d 	bl	80004c4 <RFM95_writeRegister>
 800086a:	4603      	mov	r3, r0
//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <RFM95_setLNA>:

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
}

WLV_StatusTypeDef RFM95_setLNA(RFM95_HandleTypeDef *const me)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t rByte = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
	WLV_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_LNA, &rByte);
 8000884:	f107 030d 	add.w	r3, r7, #13
 8000888:	461a      	mov	r2, r3
 800088a:	210c      	movs	r1, #12
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fea1 	bl	80005d4 <RFM95_readRegister>
 8000892:	4603      	mov	r3, r0
 8000894:	73bb      	strb	r3, [r7, #14]

	if (res != WLV_OK)
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <RFM95_setLNA+0x2c>
	{
		return WLV_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e00c      	b.n	80008ba <RFM95_setLNA+0x46>
	}

	wByte = (uint8_t) (RFLR_LNA_BOOST_HF_ON | (rByte & RFLR_LNA_BOOST_HF_MASK));
 80008a0:	7b7b      	ldrb	r3, [r7, #13]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	f043 0303 	orr.w	r3, r3, #3
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_LNA, wByte);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	461a      	mov	r2, r3
 80008b0:	210c      	movs	r1, #12
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fe06 	bl	80004c4 <RFM95_writeRegister>
 80008b8:	4603      	mov	r3, r0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <RFM95_setMode>:
 * nhận, nếu kích thước gói vượt quá bộ nhớ đệm được phân bổ cho Rx, nó sẽ ghi
 * đè lên phần truyền của bộ đệm dữ liệu.
 */

WLV_StatusTypeDef RFM95_setMode(RFM95_HandleTypeDef *const me, uint8_t mode)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b084      	sub	sp, #16
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <RFM95_setMode+0x16>
	{
		return WLV_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e022      	b.n	800091e <RFM95_setMode+0x5c>
	}

	uint8_t rByte = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
	WLV_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_OPMODE, &rByte);
 80008e0:	f107 030d 	add.w	r3, r7, #13
 80008e4:	461a      	mov	r2, r3
 80008e6:	2101      	movs	r1, #1
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff fe73 	bl	80005d4 <RFM95_readRegister>
 80008ee:	4603      	mov	r3, r0
 80008f0:	73bb      	strb	r3, [r7, #14]

	if (res != WLV_OK)
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <RFM95_setMode+0x3a>
	{
		return WLV_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e010      	b.n	800091e <RFM95_setMode+0x5c>
	}

	wByte = (uint8_t) (mode | (rByte & 0x70));
 80008fc:	7b7b      	ldrb	r3, [r7, #13]
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000904:	b25a      	sxtb	r2, r3
 8000906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800090a:	4313      	orrs	r3, r2
 800090c:	b25b      	sxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	461a      	mov	r2, r3
 8000914:	2101      	movs	r1, #1
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fdd4 	bl	80004c4 <RFM95_writeRegister>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <RFM95_setFrequency>:

WLV_StatusTypeDef RFM95_setFrequency(RFM95_HandleTypeDef *const me,
		uint32_t frequency)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
	if (me == NULL)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <RFM95_setFrequency+0x14>
	{
		return WLV_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e02c      	b.n	8000994 <RFM95_setFrequency+0x6e>
	}

	me->parent.freq = frequency;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	601a      	str	r2, [r3, #0]
	uint64_t frf = (uint64_t) (frequency << 19u) / 32;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	04db      	lsls	r3, r3, #19
 8000944:	095b      	lsrs	r3, r3, #5
 8000946:	461a      	mov	r2, r3
 8000948:	f04f 0300 	mov.w	r3, #0
 800094c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t freq[3] = { (uint8_t) (frf >> 16), (uint8_t) (frf >> 8),
 8000950:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000954:	f04f 0200 	mov.w	r2, #0
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	0c02      	lsrs	r2, r0, #16
 800095e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000962:	0c0b      	lsrs	r3, r1, #16
 8000964:	b2d3      	uxtb	r3, r2
 8000966:	733b      	strb	r3, [r7, #12]
 8000968:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	f04f 0300 	mov.w	r3, #0
 8000974:	0a02      	lsrs	r2, r0, #8
 8000976:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800097a:	0a0b      	lsrs	r3, r1, #8
 800097c:	b2d3      	uxtb	r3, r2
 800097e:	737b      	strb	r3, [r7, #13]
			(uint8_t) (frf >> 0) };
 8000980:	7c3b      	ldrb	r3, [r7, #16]
	uint8_t freq[3] = { (uint8_t) (frf >> 16), (uint8_t) (frf >> 8),
 8000982:	73bb      	strb	r3, [r7, #14]

	return RFM95_writeBurstRegister(me, REG_LR_FRFMSB, freq, 3);
 8000984:	f107 020c 	add.w	r2, r7, #12
 8000988:	2303      	movs	r3, #3
 800098a:	2106      	movs	r1, #6
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff fdcc 	bl	800052a <RFM95_writeBurstRegister>
 8000992:	4603      	mov	r3, r0
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <RFM95_transmit>:
/*
 * Data tranmission Squence
 */
WLV_StatusTypeDef RFM95_transmit(RFM95_HandleTypeDef *const me, uint8_t *pData,
		uint8_t size, uint32_t timeout)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pData == NULL)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <RFM95_transmit+0x1c>
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <RFM95_transmit+0x20>
	{
		return WLV_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e093      	b.n	8000ae4 <RFM95_transmit+0x148>
	}

	uint8_t rByte = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	76fb      	strb	r3, [r7, #27]
	uint8_t currentMode = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	74bb      	strb	r3, [r7, #18]

	RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, 0xA0);
 80009c8:	22a0      	movs	r2, #160	; 0xa0
 80009ca:	211e      	movs	r1, #30
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fd79 	bl	80004c4 <RFM95_writeRegister>

	/* 0. Tx init */
	/* Read current value of REG_LR_MODEMCONFIG1 register */
	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 80009d2:	f107 0312 	add.w	r3, r7, #18
 80009d6:	461a      	mov	r2, r3
 80009d8:	2101      	movs	r1, #1
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fdfa 	bl	80005d4 <RFM95_readRegister>

	/* 1. Static configuration registers can only be accessed in Sleep mode, Stand-by mode or FSTX mode. */
	wByte = (uint8_t) (RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 80009e0:	7cbb      	ldrb	r3, [r7, #18]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	f023 0307 	bic.w	r3, r3, #7
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 80009f2:	7efb      	ldrb	r3, [r7, #27]
 80009f4:	461a      	mov	r2, r3
 80009f6:	2101      	movs	r1, #1
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff fd63 	bl	80004c4 <RFM95_writeRegister>

	if (me->parent.SF == RFLR_MODEMCONFIG2_SF_6 >> 4)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	791b      	ldrb	r3, [r3, #4]
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	d103      	bne.n	8000a0e <RFM95_transmit+0x72>
	{
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 8000a06:	2101      	movs	r1, #1
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fe19 	bl	8000640 <RFM95_setHeaderMode>
	}

	/* 2. The LoRaTM FIFO can only be filled in Stand-by mode. */
	RFM95_readRegister(me, REG_LR_FIFOTXBASEADDR, &rByte);
 8000a0e:	f107 0313 	add.w	r3, r7, #19
 8000a12:	461a      	mov	r2, r3
 8000a14:	210e      	movs	r1, #14
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f7ff fddc 	bl	80005d4 <RFM95_readRegister>

	RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8000a1c:	7cfb      	ldrb	r3, [r7, #19]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	210d      	movs	r1, #13
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f7ff fd4e 	bl	80004c4 <RFM95_writeRegister>

//	RFM95_writeRegister(me, REG_LR_PAYLOADLENGTH, 0x0);

	RFM95_writeRegister(me, REG_LR_PAYLOADLENGTH, size);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	2122      	movs	r1, #34	; 0x22
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fd48 	bl	80004c4 <RFM95_writeRegister>
	uint8_t temp = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	747b      	strb	r3, [r7, #17]
	RFM95_readRegister(me, REG_LR_PAYLOADLENGTH, &temp);
 8000a38:	f107 0311 	add.w	r3, r7, #17
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2122      	movs	r1, #34	; 0x22
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff fdc7 	bl	80005d4 <RFM95_readRegister>
	(void) temp;
	for (size_t i = 0; i < size; i++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	e00b      	b.n	8000a64 <RFM95_transmit+0xc8>
	{
		RFM95_writeRegister(me, REG_LR_FIFO, *(pData++));
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461a      	mov	r2, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	f7ff fd33 	bl	80004c4 <RFM95_writeRegister>
	for (size_t i = 0; i < size; i++)
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3301      	adds	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d3ef      	bcc.n	8000a4c <RFM95_transmit+0xb0>
	}

	/* 3. Data transmission is initiated by sending TX mode request. */
	wByte = (uint8_t) (RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_TRANSMITTER);
 8000a6c:	2383      	movs	r3, #131	; 0x83
 8000a6e:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8000a70:	7efb      	ldrb	r3, [r7, #27]
 8000a72:	461a      	mov	r2, r3
 8000a74:	2101      	movs	r1, #1
 8000a76:	68f8      	ldr	r0, [r7, #12]
 8000a78:	f7ff fd24 	bl	80004c4 <RFM95_writeRegister>

	HAL_Delay(1000);
 8000a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a80:	f000 fb4e 	bl	8001120 <HAL_Delay>
	/* 4. Upon completion the TxDone interrupt is issued and the radio returns to Stand-by mode. */
	uint32_t tickStart = HAL_GetTick();
 8000a84:	f000 fb42 	bl	800110c <HAL_GetTick>
 8000a88:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8000a8a:	e022      	b.n	8000ad2 <RFM95_transmit+0x136>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8000a8c:	f107 0313 	add.w	r3, r7, #19
 8000a90:	461a      	mov	r2, r3
 8000a92:	2112      	movs	r1, #18
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f7ff fd9d 	bl	80005d4 <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_TXDONE) == RFLR_IRQFLAGS_TXDONE)
 8000a9a:	7cfb      	ldrb	r3, [r7, #19]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d016      	beq.n	8000ad2 <RFM95_transmit+0x136>
		{
			/* Clear TX DONE flag by write 1 */
			wByte = (uint8_t) (RFLR_IRQFLAGS_TXDONE
 8000aa4:	2308      	movs	r3, #8
 8000aa6:	76fb      	strb	r3, [r7, #27]
					| (rByte & RFLR_IRQFLAGS_TXDONE_MASK));
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8000aa8:	7efb      	ldrb	r3, [r7, #27]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2112      	movs	r1, #18
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fd08 	bl	80004c4 <RFM95_writeRegister>
			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8000ab4:	f107 0313 	add.w	r3, r7, #19
 8000ab8:	461a      	mov	r2, r3
 8000aba:	2112      	movs	r1, #18
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fd89 	bl	80005d4 <RFM95_readRegister>
			return RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8000ac2:	7cbb      	ldrb	r3, [r7, #18]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fcfb 	bl	80004c4 <RFM95_writeRegister>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e008      	b.n	8000ae4 <RFM95_transmit+0x148>
	while (HAL_GetTick() - tickStart <= timeout)
 8000ad2:	f000 fb1b 	bl	800110c <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d2d4      	bcs.n	8000a8c <RFM95_transmit+0xf0>
		}
	}

	return WLV_TIMEOUT;
 8000ae2:	2303      	movs	r3, #3
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <RFM95_reset>:
	RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
	return WLV_TIMEOUT;
}

void RFM95_reset(RFM95_HandleTypeDef *const me)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d01f      	beq.n	8000b3a <RFM95_reset+0x4e>
	{
		return;
	}

	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	8b9b      	ldrh	r3, [r3, #28]
 8000b02:	2200      	movs	r2, #0
 8000b04:	4619      	mov	r1, r3
 8000b06:	f000 fda1 	bl	800164c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 fb08 	bl	8001120 <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	8b9b      	ldrh	r3, [r3, #28]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f000 fd96 	bl	800164c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 fafd 	bl	8001120 <HAL_Delay>

	uint8_t rByte = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
	RFM95_readRegister(me, REG_LR_VERSION, &rByte);
 8000b2a:	f107 030f 	add.w	r3, r7, #15
 8000b2e:	461a      	mov	r2, r3
 8000b30:	2142      	movs	r1, #66	; 0x42
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fd4e 	bl	80005d4 <RFM95_readRegister>
 8000b38:	e000      	b.n	8000b3c <RFM95_reset+0x50>
		return;
 8000b3a:	bf00      	nop

	if (rByte != 0x12)
	{
//		while(1);
	}
}
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <RFM95_setRFPowerAmplifier>:
/* Công suất 14dBm đầu ra cần có antena thfi mới truyền đi được, nếu công suất là 20dBm thì không cần antena vẫn truyền đi được
 * Vấn đề là do có hoặc không có antena
 */
WLV_StatusTypeDef RFM95_setRFPowerAmplifier(RFM95_HandleTypeDef *const me,
		uint8_t paSelect, uint8_t Pout)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	70fb      	strb	r3, [r7, #3]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <RFM95_setRFPowerAmplifier+0x1a>
	{
		return WLV_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e044      	b.n	8000be6 <RFM95_setRFPowerAmplifier+0xa4>
	}

	uint8_t wByte = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
	uint8_t outputPower = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73bb      	strb	r3, [r7, #14]
	if (paSelect == RFLR_PACONFIG_PASELECT_PABOOST
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2b80      	cmp	r3, #128	; 0x80
 8000b68:	d11e      	bne.n	8000ba8 <RFM95_setRFPowerAmplifier+0x66>
			&& ((Pout >= 15) && (Pout <= 20)))
 8000b6a:	78bb      	ldrb	r3, [r7, #2]
 8000b6c:	2b0e      	cmp	r3, #14
 8000b6e:	d91b      	bls.n	8000ba8 <RFM95_setRFPowerAmplifier+0x66>
 8000b70:	78bb      	ldrb	r3, [r7, #2]
 8000b72:	2b14      	cmp	r3, #20
 8000b74:	d818      	bhi.n	8000ba8 <RFM95_setRFPowerAmplifier+0x66>
	{
		if (Pout > 17)
 8000b76:	78bb      	ldrb	r3, [r7, #2]
 8000b78:	2b11      	cmp	r3, #17
 8000b7a:	d906      	bls.n	8000b8a <RFM95_setRFPowerAmplifier+0x48>
		{
			RFM95_writeRegister(me, REG_LR_PADAC, RFLR_PADAC_20DBM_ON);
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	214d      	movs	r1, #77	; 0x4d
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fc9f 	bl	80004c4 <RFM95_writeRegister>
			Pout = 17;
 8000b86:	2311      	movs	r3, #17
 8000b88:	70bb      	strb	r3, [r7, #2]
		}

		outputPower = Pout - 17 + 15;
 8000b8a:	78bb      	ldrb	r3, [r7, #2]
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t) (paSelect | outputPower);
 8000b90:	78fa      	ldrb	r2, [r7, #3]
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	2109      	movs	r1, #9
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fc90 	bl	80004c4 <RFM95_writeRegister>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	e01e      	b.n	8000be6 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else if (paSelect == RFLR_PACONFIG_PASELECT_RFO
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d11a      	bne.n	8000be4 <RFM95_setRFPowerAmplifier+0xa2>
			&& ((Pout >= 0) && (Pout <= 14)))
 8000bae:	78bb      	ldrb	r3, [r7, #2]
 8000bb0:	2b0e      	cmp	r3, #14
 8000bb2:	d817      	bhi.n	8000be4 <RFM95_setRFPowerAmplifier+0xa2>
	{
		uint8_t maxPower = 7;    //chọn 7 để số tròn, hoặc có thể là 2, giá trị mặc định là 4
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	737b      	strb	r3, [r7, #13]
		outputPower = Pout;
 8000bb8:	78bb      	ldrb	r3, [r7, #2]
 8000bba:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t) (paSelect | (maxPower << 4) | outputPower);
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	b25a      	sxtb	r2, r3
 8000bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b25a      	sxtb	r2, r3
 8000bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2109      	movs	r1, #9
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fc72 	bl	80004c4 <RFM95_writeRegister>
 8000be0:	4603      	mov	r3, r0
 8000be2:	e000      	b.n	8000be6 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else
	{
		return WLV_OK;
 8000be4:	2300      	movs	r3, #0
	}
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bf4:	f000 fa25 	bl	8001042 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bf8:	f000 f874 	bl	8000ce4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bfc:	f000 f8f0 	bl	8000de0 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000c00:	f000 f8b8 	bl	8000d74 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	rfm95.resetPort = RFM95_RESET_GPIO_Port;
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <main+0xe0>)
 8000c06:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <main+0xe4>)
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
	rfm95.resetPin = RFM95_RESET_Pin;
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <main+0xe0>)
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	839a      	strh	r2, [r3, #28]
	rfm95.nssPin = RFM95_NSS_Pin;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <main+0xe0>)
 8000c12:	2210      	movs	r2, #16
 8000c14:	83da      	strh	r2, [r3, #30]
	rfm95.nssPort = RFM95_NSS_GPIO_Port;
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <main+0xe0>)
 8000c18:	4a2f      	ldr	r2, [pc, #188]	; (8000cd8 <main+0xe8>)
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
	rfm95.resetPort = GPIOC;
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <main+0xe0>)
 8000c1e:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <main+0xe4>)
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
	rfm95.resetPin = GPIO_PIN_4;
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <main+0xe0>)
 8000c24:	2210      	movs	r2, #16
 8000c26:	839a      	strh	r2, [r3, #28]
	rfm95.nssPin = GPIO_PIN_4;
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <main+0xe0>)
 8000c2a:	2210      	movs	r2, #16
 8000c2c:	83da      	strh	r2, [r3, #30]
	rfm95.nssPort = GPIOA;
 8000c2e:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <main+0xe0>)
 8000c30:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <main+0xe8>)
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
	rfm95.hspi = &hspi1;
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <main+0xe0>)
 8000c36:	4a29      	ldr	r2, [pc, #164]	; (8000cdc <main+0xec>)
 8000c38:	619a      	str	r2, [r3, #24]
	RFM95_reset(&rfm95);
 8000c3a:	4825      	ldr	r0, [pc, #148]	; (8000cd0 <main+0xe0>)
 8000c3c:	f7ff ff56 	bl	8000aec <RFM95_reset>
	RFM95_setMode(&rfm95,
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	4823      	ldr	r0, [pc, #140]	; (8000cd0 <main+0xe0>)
 8000c44:	f7ff fe3d 	bl	80008c2 <RFM95_setMode>
			RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_SLEEP
					| RFLR_OPMODE_FREQMODE_ACCESS_HF);
	RFM95_setFrequency(&rfm95, 923);
 8000c48:	f240 319b 	movw	r1, #923	; 0x39b
 8000c4c:	4820      	ldr	r0, [pc, #128]	; (8000cd0 <main+0xe0>)
 8000c4e:	f7ff fe6a 	bl	8000926 <RFM95_setFrequency>
	RFM95_setBandwidth(&rfm95, RFLR_MODEMCONFIG1_BW_125_KHZ);
 8000c52:	2170      	movs	r1, #112	; 0x70
 8000c54:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <main+0xe0>)
 8000c56:	f7ff fdd6 	bl	8000806 <RFM95_setBandwidth>
	RFM95_setSpreadingFactor(&rfm95, RFLR_MODEMCONFIG2_SF_10);
 8000c5a:	21a0      	movs	r1, #160	; 0xa0
 8000c5c:	481c      	ldr	r0, [pc, #112]	; (8000cd0 <main+0xe0>)
 8000c5e:	f7ff fd23 	bl	80006a8 <RFM95_setSpreadingFactor>
	RFM95_setLNA(&rfm95);
 8000c62:	481b      	ldr	r0, [pc, #108]	; (8000cd0 <main+0xe0>)
 8000c64:	f7ff fe06 	bl	8000874 <RFM95_setLNA>
	RFM95_setRFPowerAmplifier(&rfm95, RFLR_PACONFIG_PASELECT_PABOOST, 20);
 8000c68:	2214      	movs	r2, #20
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <main+0xe0>)
 8000c6e:	f7ff ff68 	bl	8000b42 <RFM95_setRFPowerAmplifier>
	RFM95_setMode(&rfm95, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 8000c72:	2181      	movs	r1, #129	; 0x81
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <main+0xe0>)
 8000c76:	f7ff fe24 	bl	80008c2 <RFM95_setMode>

	RFM95_transmit(&rfm95, (uint8_t*) "Hello\n", 6, 1000);
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	2206      	movs	r2, #6
 8000c80:	4917      	ldr	r1, [pc, #92]	; (8000ce0 <main+0xf0>)
 8000c82:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <main+0xe0>)
 8000c84:	f7ff fe8a 	bl	800099c <RFM95_transmit>
	RFM95_transmit(&rfm95, (uint8_t*) "Hello\n", 6, 1000);
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	2206      	movs	r2, #6
 8000c8e:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <main+0xf0>)
 8000c90:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <main+0xe0>)
 8000c92:	f7ff fe83 	bl	800099c <RFM95_transmit>
	RFM95_transmit(&rfm95, (uint8_t*) "Hello\n", 6, 1000);
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	4910      	ldr	r1, [pc, #64]	; (8000ce0 <main+0xf0>)
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <main+0xe0>)
 8000ca0:	f7ff fe7c 	bl	800099c <RFM95_transmit>
	RFM95_transmit(&rfm95, (uint8_t*) "Hello\n", 6, 1000);
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	2206      	movs	r2, #6
 8000caa:	490d      	ldr	r1, [pc, #52]	; (8000ce0 <main+0xf0>)
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <main+0xe0>)
 8000cae:	f7ff fe75 	bl	800099c <RFM95_transmit>
	RFM95_transmit(&rfm95, (uint8_t*) "Hello\n", 6, 1000);
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	2206      	movs	r2, #6
 8000cb8:	4909      	ldr	r1, [pc, #36]	; (8000ce0 <main+0xf0>)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <main+0xe0>)
 8000cbc:	f7ff fe6e 	bl	800099c <RFM95_transmit>
	RFM95_transmit(&rfm95, (uint8_t*) "Hello\n", 6, 1000);
 8000cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc4:	2206      	movs	r2, #6
 8000cc6:	4906      	ldr	r1, [pc, #24]	; (8000ce0 <main+0xf0>)
 8000cc8:	4801      	ldr	r0, [pc, #4]	; (8000cd0 <main+0xe0>)
 8000cca:	f7ff fe67 	bl	800099c <RFM95_transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000cce:	e7fe      	b.n	8000cce <main+0xde>
 8000cd0:	20000028 	.word	0x20000028
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	20000064 	.word	0x20000064
 8000ce0:	08002d10 	.word	0x08002d10

08000ce4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b092      	sub	sp, #72	; 0x48
 8000ce8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	2234      	movs	r2, #52	; 0x34
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fff8 	bl	8002ce8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <SystemClock_Config+0x8c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <SystemClock_Config+0x8c>)
 8000d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d14:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d16:	2310      	movs	r3, #16
 8000d18:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000d22:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fca3 	bl	800167c <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 8000d3c:	f000 f8b6 	bl	8000eac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 ffbf 	bl	8001cdc <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000d64:	f000 f8a2 	bl	8000eac <Error_Handler>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3748      	adds	r7, #72	; 0x48
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40007000 	.word	0x40007000

08000d74 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <MX_SPI1_Init+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d84:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dc0:	220a      	movs	r2, #10
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_SPI1_Init+0x64>)
 8000dc6:	f001 f9c3 	bl	8002150 <HAL_SPI_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000dd0:	f000 f86c 	bl	8000eac <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000064 	.word	0x20000064
 8000ddc:	40013000 	.word	0x40013000

08000de0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <MX_GPIO_Init+0xc0>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <MX_GPIO_Init+0xc0>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <MX_GPIO_Init+0xc0>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <MX_GPIO_Init+0xc0>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <MX_GPIO_Init+0xc0>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	61d3      	str	r3, [r2, #28]
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <MX_GPIO_Init+0xc0>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RFM95_PWREN_GPIO_Port, RFM95_PWREN_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2108      	movs	r1, #8
 8000e2a:	481e      	ldr	r0, [pc, #120]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e2c:	f000 fc0e 	bl	800164c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RFM95_NSS_GPIO_Port, RFM95_NSS_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2110      	movs	r1, #16
 8000e34:	481c      	ldr	r0, [pc, #112]	; (8000ea8 <MX_GPIO_Init+0xc8>)
 8000e36:	f000 fc09 	bl	800164c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RFM95_RESET_GPIO_Port, RFM95_RESET_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4819      	ldr	r0, [pc, #100]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e40:	f000 fc04 	bl	800164c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RFM95_DIO0_Pin RFM95_DIO1_Pin RFM95_DIO2_Pin */
	GPIO_InitStruct.Pin = RFM95_DIO0_Pin | RFM95_DIO1_Pin | RFM95_DIO2_Pin;
 8000e44:	2307      	movs	r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e5a:	f000 fa67 	bl	800132c <HAL_GPIO_Init>

	/*Configure GPIO pins : RFM95_PWREN_Pin RFM95_RESET_Pin */
	GPIO_InitStruct.Pin = RFM95_PWREN_Pin | RFM95_RESET_Pin;
 8000e5e:	2318      	movs	r3, #24
 8000e60:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <MX_GPIO_Init+0xc4>)
 8000e76:	f000 fa59 	bl	800132c <HAL_GPIO_Init>

	/*Configure GPIO pin : RFM95_NSS_Pin */
	GPIO_InitStruct.Pin = RFM95_NSS_Pin;
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(RFM95_NSS_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_GPIO_Init+0xc8>)
 8000e92:	f000 fa4b 	bl	800132c <HAL_GPIO_Init>

}
 8000e96:	bf00      	nop
 8000e98:	3720      	adds	r7, #32
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020000 	.word	0x40020000

08000eac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_MspInit+0x58>)
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <HAL_MspInit+0x58>)
 8000ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_MspInit+0x58>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_MspInit+0x58>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_MspInit+0x58>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6213      	str	r3, [r2, #32]
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_MspInit+0x58>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_MspInit+0x58>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_MspInit+0x58>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6253      	str	r3, [r2, #36]	; 0x24
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_MspInit+0x58>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_SPI_MspInit+0x7c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d127      	bne.n	8000f86 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_SPI_MspInit+0x80>)
 8000f38:	6a1b      	ldr	r3, [r3, #32]
 8000f3a:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <HAL_SPI_MspInit+0x80>)
 8000f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f40:	6213      	str	r3, [r2, #32]
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_SPI_MspInit+0x80>)
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_SPI_MspInit+0x80>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_SPI_MspInit+0x80>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_SPI_MspInit+0x80>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f66:	23e0      	movs	r3, #224	; 0xe0
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f76:	2305      	movs	r3, #5
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_SPI_MspInit+0x84>)
 8000f82:	f000 f9d3 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f881 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
	...

08000ff8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800101e:	f7ff ffe4 	bl	8000fea <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f001 fe3d 	bl	8002ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001026:	f7ff fde3 	bl	8000bf0 <main>
  bx lr
 800102a:	4770      	bx	lr
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001034:	08002d44 	.word	0x08002d44
  ldr r2, =_sbss
 8001038:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800103c:	200000c0 	.word	0x200000c0

08001040 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_IRQHandler>

08001042 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f939 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001052:	200f      	movs	r0, #15
 8001054:	f000 f80e 	bl	8001074 <HAL_InitTick>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	e001      	b.n	8001068 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001064:	f7ff ff28 	bl	8000eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001068:	79fb      	ldrb	r3, [r7, #7]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_InitTick+0x68>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d022      	beq.n	80010ce <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_InitTick+0x6c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_InitTick+0x68>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001094:	fbb1 f3f3 	udiv	r3, r1, r3
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f938 	bl	8001312 <HAL_SYSTICK_Config>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10f      	bne.n	80010c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	d809      	bhi.n	80010c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
 80010b6:	f000 f910 	bl	80012da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_InitTick+0x70>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e007      	b.n	80010d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e004      	b.n	80010d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e001      	b.n	80010d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_IncTick+0x1c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x20>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a03      	ldr	r2, [pc, #12]	; (8001104 <HAL_IncTick+0x1c>)
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200000bc 	.word	0x200000bc
 8001108:	20000008 	.word	0x20000008

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b02      	ldr	r3, [pc, #8]	; (800111c <HAL_GetTick+0x10>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	200000bc 	.word	0x200000bc

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff fff0 	bl	800110c <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d004      	beq.n	8001144 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_Delay+0x40>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001144:	bf00      	nop
 8001146:	f7ff ffe1 	bl	800110c <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	429a      	cmp	r2, r3
 8001154:	d8f7      	bhi.n	8001146 <HAL_Delay+0x26>
  {
  }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff90 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff49 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff5e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffb0 	bl	8001280 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001342:	e160      	b.n	8001606 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8152 	beq.w	8001600 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d005      	beq.n	8001374 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001370:	2b02      	cmp	r3, #2
 8001372:	d130      	bne.n	80013d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80013aa:	2201      	movs	r2, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 0201 	and.w	r2, r3, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d017      	beq.n	8001412 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d123      	bne.n	8001466 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	220f      	movs	r2, #15
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	6939      	ldr	r1, [r7, #16]
 8001462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2203      	movs	r2, #3
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0203 	and.w	r2, r3, #3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80ac 	beq.w	8001600 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_GPIO_Init+0x2f8>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <HAL_GPIO_Init+0x2f8>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <HAL_GPIO_Init+0x2f8>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80014c0:	4a59      	ldr	r2, [pc, #356]	; (8001628 <HAL_GPIO_Init+0x2fc>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a51      	ldr	r2, [pc, #324]	; (800162c <HAL_GPIO_Init+0x300>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d025      	beq.n	8001538 <HAL_GPIO_Init+0x20c>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a50      	ldr	r2, [pc, #320]	; (8001630 <HAL_GPIO_Init+0x304>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d01f      	beq.n	8001534 <HAL_GPIO_Init+0x208>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x308>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d019      	beq.n	8001530 <HAL_GPIO_Init+0x204>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x30c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d013      	beq.n	800152c <HAL_GPIO_Init+0x200>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x310>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d00d      	beq.n	8001528 <HAL_GPIO_Init+0x1fc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x314>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d007      	beq.n	8001524 <HAL_GPIO_Init+0x1f8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_GPIO_Init+0x318>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d101      	bne.n	8001520 <HAL_GPIO_Init+0x1f4>
 800151c:	2306      	movs	r3, #6
 800151e:	e00c      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001520:	2307      	movs	r3, #7
 8001522:	e00a      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001524:	2305      	movs	r3, #5
 8001526:	e008      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001528:	2304      	movs	r3, #4
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x20e>
 800152c:	2303      	movs	r3, #3
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001530:	2302      	movs	r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x20e>
 8001538:	2300      	movs	r3, #0
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800154a:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x2fc>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001558:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_GPIO_Init+0x31c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800157c:	4a32      	ldr	r2, [pc, #200]	; (8001648 <HAL_GPIO_Init+0x31c>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_GPIO_Init+0x31c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015a6:	4a28      	ldr	r2, [pc, #160]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <HAL_GPIO_Init+0x31c>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f ae97 	bne.w	8001344 <HAL_GPIO_Init+0x18>
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40010000 	.word	0x40010000
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40021400 	.word	0x40021400
 8001644:	40021800 	.word	0x40021800
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e31d      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168e:	4b94      	ldr	r3, [pc, #592]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001698:	4b91      	ldr	r3, [pc, #580]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d07b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d006      	beq.n	80016c2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d10f      	bne.n	80016da <HAL_RCC_OscConfig+0x5e>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d10b      	bne.n	80016da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c2:	4b87      	ldr	r3, [pc, #540]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d06a      	beq.n	80017a4 <HAL_RCC_OscConfig+0x128>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d166      	bne.n	80017a4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e2f7      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d106      	bne.n	80016f0 <HAL_RCC_OscConfig+0x74>
 80016e2:	4b7f      	ldr	r3, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a7e      	ldr	r2, [pc, #504]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e02d      	b.n	800174c <HAL_RCC_OscConfig+0xd0>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10c      	bne.n	8001712 <HAL_RCC_OscConfig+0x96>
 80016f8:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a78      	ldr	r2, [pc, #480]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a75      	ldr	r2, [pc, #468]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0xd0>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0xb8>
 800171a:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a70      	ldr	r2, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b6e      	ldr	r3, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0xd0>
 8001734:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a69      	ldr	r2, [pc, #420]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800173a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fcda 	bl	800110c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fcd6 	bl	800110c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e2ad      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0xe0>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fcc6 	bl	800110c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fcc2 	bl	800110c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e299      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001796:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x108>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d05a      	beq.n	8001868 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d119      	bne.n	80017f2 <HAL_RCC_OscConfig+0x176>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d116      	bne.n	80017f2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c4:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_OscConfig+0x160>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e276      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	493d      	ldr	r1, [pc, #244]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f0:	e03a      	b.n	8001868 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d020      	beq.n	800183c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_RCC_OscConfig+0x268>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fc84 	bl	800110c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fc80 	bl	800110c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e257      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	492a      	ldr	r1, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
 800183a:	e015      	b.n	8001868 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_RCC_OscConfig+0x268>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fc63 	bl	800110c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fc5f 	bl	800110c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e236      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80b8 	beq.w	80019e6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d170      	bne.n	800195e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_OscConfig+0x218>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e21a      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d921      	bls.n	80018e8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fbf1 	bl	8002090 <RCC_SetFlashLatencyFromMSIRange>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e208      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	4906      	ldr	r1, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	061b      	lsls	r3, r3, #24
 80018d8:	4901      	ldr	r1, [pc, #4]	; (80018e0 <HAL_RCC_OscConfig+0x264>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
 80018de:	e020      	b.n	8001922 <HAL_RCC_OscConfig+0x2a6>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e8:	4ba4      	ldr	r3, [pc, #656]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	49a1      	ldr	r1, [pc, #644]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fa:	4ba0      	ldr	r3, [pc, #640]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	061b      	lsls	r3, r3, #24
 8001908:	499c      	ldr	r1, [pc, #624]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fbbc 	bl	8002090 <RCC_SetFlashLatencyFromMSIRange>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e1d3      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	0b5b      	lsrs	r3, r3, #13
 8001928:	3301      	adds	r3, #1
 800192a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001932:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001934:	6892      	ldr	r2, [r2, #8]
 8001936:	0912      	lsrs	r2, r2, #4
 8001938:	f002 020f 	and.w	r2, r2, #15
 800193c:	4990      	ldr	r1, [pc, #576]	; (8001b80 <HAL_RCC_OscConfig+0x504>)
 800193e:	5c8a      	ldrb	r2, [r1, r2]
 8001940:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001942:	4a90      	ldr	r2, [pc, #576]	; (8001b84 <HAL_RCC_OscConfig+0x508>)
 8001944:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001946:	4b90      	ldr	r3, [pc, #576]	; (8001b88 <HAL_RCC_OscConfig+0x50c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fb92 	bl	8001074 <HAL_InitTick>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d045      	beq.n	80019e6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	e1b5      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d029      	beq.n	80019ba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001966:	4b89      	ldr	r3, [pc, #548]	; (8001b8c <HAL_RCC_OscConfig+0x510>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fbce 	bl	800110c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001974:	f7ff fbca 	bl	800110c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1a1      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001986:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001992:	4b7a      	ldr	r3, [pc, #488]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4977      	ldr	r1, [pc, #476]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a4:	4b75      	ldr	r3, [pc, #468]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	4972      	ldr	r1, [pc, #456]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
 80019b8:	e015      	b.n	80019e6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <HAL_RCC_OscConfig+0x510>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fba4 	bl	800110c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c8:	f7ff fba0 	bl	800110c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e177      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019da:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d030      	beq.n	8001a54 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d016      	beq.n	8001a28 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fa:	4b65      	ldr	r3, [pc, #404]	; (8001b90 <HAL_RCC_OscConfig+0x514>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7ff fb84 	bl	800110c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff fb80 	bl	800110c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e157      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a1a:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x38c>
 8001a26:	e015      	b.n	8001a54 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_OscConfig+0x514>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb6d 	bl	800110c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff fb69 	bl	800110c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e140      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a48:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80b5 	beq.w	8001bcc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a66:	4b45      	ldr	r3, [pc, #276]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10d      	bne.n	8001a8e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	4a41      	ldr	r2, [pc, #260]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6253      	str	r3, [r2, #36]	; 0x24
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_OscConfig+0x518>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <HAL_RCC_OscConfig+0x518>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a3d      	ldr	r2, [pc, #244]	; (8001b94 <HAL_RCC_OscConfig+0x518>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fb31 	bl	800110c <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff fb2d 	bl	800110c <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b64      	cmp	r3, #100	; 0x64
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e104      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x518>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x466>
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad8:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ade:	6353      	str	r3, [r2, #52]	; 0x34
 8001ae0:	e02d      	b.n	8001b3e <HAL_RCC_OscConfig+0x4c2>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x488>
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	4a23      	ldr	r2, [pc, #140]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af4:	6353      	str	r3, [r2, #52]	; 0x34
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	4a20      	ldr	r2, [pc, #128]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b00:	6353      	str	r3, [r2, #52]	; 0x34
 8001b02:	e01c      	b.n	8001b3e <HAL_RCC_OscConfig+0x4c2>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d10c      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4aa>
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	6353      	str	r3, [r2, #52]	; 0x34
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1c:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6353      	str	r3, [r2, #52]	; 0x34
 8001b24:	e00b      	b.n	8001b3e <HAL_RCC_OscConfig+0x4c2>
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b30:	6353      	str	r3, [r2, #52]	; 0x34
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b3c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d015      	beq.n	8001b72 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fae1 	bl	800110c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7ff fadd 	bl	800110c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0b2      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_OscConfig+0x500>)
 8001b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0ee      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4d2>
 8001b70:	e023      	b.n	8001bba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7ff facb 	bl	800110c <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b78:	e019      	b.n	8001bae <HAL_RCC_OscConfig+0x532>
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	08002d24 	.word	0x08002d24
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	42470020 	.word	0x42470020
 8001b90:	42470680 	.word	0x42470680
 8001b94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff fab8 	bl	800110c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e08d      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bae:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bba:	7ffb      	ldrb	r3, [r7, #31]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	4a43      	ldr	r2, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d079      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d056      	beq.n	8001c88 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d13b      	bne.n	8001c5a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_OscConfig+0x65c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fa90 	bl	800110c <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff fa8c 	bl	800110c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e063      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c02:	4b34      	ldr	r3, [pc, #208]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0e:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	4319      	orrs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	430b      	orrs	r3, r1
 8001c26:	492b      	ldr	r1, [pc, #172]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x65c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fa6b 	bl	800110c <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7ff fa67 	bl	800110c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e03e      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x5be>
 8001c58:	e036      	b.n	8001cc8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_RCC_OscConfig+0x65c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fa54 	bl	800110c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c68:	f7ff fa50 	bl	800110c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e027      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x5ec>
 8001c86:	e01f      	b.n	8001cc8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e01a      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_RCC_OscConfig+0x658>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	42470060 	.word	0x42470060

08001cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e11a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf0:	4b8f      	ldr	r3, [pc, #572]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d919      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x34>
 8001d04:	4b8a      	ldr	r3, [pc, #552]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a89      	ldr	r2, [pc, #548]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b87      	ldr	r3, [pc, #540]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 0201 	bic.w	r2, r3, #1
 8001d18:	4985      	ldr	r1, [pc, #532]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d20:	4b83      	ldr	r3, [pc, #524]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0f9      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3e:	4b7d      	ldr	r3, [pc, #500]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	497a      	ldr	r1, [pc, #488]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 808e 	beq.w	8001e7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d66:	4b73      	ldr	r3, [pc, #460]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0d7      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0cb      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0bf      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e0b7      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	495c      	ldr	r1, [pc, #368]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff f9a0 	bl	800110c <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff f998 	bl	800110c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e09b      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d1ee      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xfc>
 8001dfa:	e03e      	b.n	8001e7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d112      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e06:	f7ff f981 	bl	800110c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e084      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e1c:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x12a>
 8001e28:	e027      	b.n	8001e7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d11d      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff f96a 	bl	800110c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e06d      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4a:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d1ee      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x158>
 8001e56:	e010      	b.n	8001e7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff f958 	bl	800110c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e05b      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ee      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d219      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCC_ClockConfig+0x1be>
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0201 	bic.w	r2, r3, #1
 8001ea2:	4923      	ldr	r1, [pc, #140]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_RCC_ClockConfig+0x254>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e034      	b.n	8001f26 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4917      	ldr	r1, [pc, #92]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	490f      	ldr	r1, [pc, #60]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001efa:	f000 f823 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_RCC_ClockConfig+0x258>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	490b      	ldr	r1, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x260>)
 8001f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x264>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f8aa 	bl	8001074 <HAL_InitTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f24:	7afb      	ldrb	r3, [r7, #11]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08002d24 	.word	0x08002d24
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f4a:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d00c      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d87c      	bhi.n	8002058 <HAL_RCC_GetSysClockFreq+0x114>
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x24>
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x2a>
 8001f66:	e077      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f6a:	613b      	str	r3, [r7, #16]
      break;
 8001f6c:	e082      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_GetSysClockFreq+0x144>)
 8001f70:	613b      	str	r3, [r7, #16]
      break;
 8001f72:	e07f      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	0c9b      	lsrs	r3, r3, #18
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	4a43      	ldr	r2, [pc, #268]	; (800208c <HAL_RCC_GetSysClockFreq+0x148>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0d9b      	lsrs	r3, r3, #22
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01a      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	4939      	ldr	r1, [pc, #228]	; (8002088 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fa4:	fb01 f003 	mul.w	r0, r1, r3
 8001fa8:	2100      	movs	r1, #0
 8001faa:	fb01 f102 	mul.w	r1, r1, r2
 8001fae:	1844      	adds	r4, r0, r1
 8001fb0:	4935      	ldr	r1, [pc, #212]	; (8002088 <HAL_RCC_GetSysClockFreq+0x144>)
 8001fb2:	fba2 0101 	umull	r0, r1, r2, r1
 8001fb6:	1863      	adds	r3, r4, r1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	f7fe f8db 	bl	800017c <__aeabi_uldivmod>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4613      	mov	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e040      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	f04f 0500 	mov.w	r5, #0
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	014b      	lsls	r3, r1, #5
 8001fe6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fea:	0142      	lsls	r2, r0, #5
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	1b00      	subs	r0, r0, r4
 8001ff2:	eb61 0105 	sbc.w	r1, r1, r5
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	018b      	lsls	r3, r1, #6
 8002000:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002004:	0182      	lsls	r2, r0, #6
 8002006:	1a12      	subs	r2, r2, r0
 8002008:	eb63 0301 	sbc.w	r3, r3, r1
 800200c:	f04f 0000 	mov.w	r0, #0
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	00d9      	lsls	r1, r3, #3
 8002016:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800201a:	00d0      	lsls	r0, r2, #3
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	1912      	adds	r2, r2, r4
 8002022:	eb45 0303 	adc.w	r3, r5, r3
 8002026:	f04f 0000 	mov.w	r0, #0
 800202a:	f04f 0100 	mov.w	r1, #0
 800202e:	0299      	lsls	r1, r3, #10
 8002030:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002034:	0290      	lsls	r0, r2, #10
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	461a      	mov	r2, r3
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	f7fe f899 	bl	800017c <__aeabi_uldivmod>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4613      	mov	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	613b      	str	r3, [r7, #16]
      break;
 8002056:	e00d      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_GetSysClockFreq+0x13c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	0b5b      	lsrs	r3, r3, #13
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	613b      	str	r3, [r7, #16]
      break;
 8002072:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002074:	693b      	ldr	r3, [r7, #16]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bdb0      	pop	{r4, r5, r7, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
 8002084:	00f42400 	.word	0x00f42400
 8002088:	016e3600 	.word	0x016e3600
 800208c:	08002d18 	.word	0x08002d18

08002090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12c      	bne.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e016      	b.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ca:	6253      	str	r3, [r2, #36]	; 0x24
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80020e0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80020e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80020f4:	d105      	bne.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80020fc:	d101      	bne.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80020fe:	2301      	movs	r3, #1
 8002100:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0f      	ldr	r2, [pc, #60]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0201 	bic.w	r2, r3, #1
 800211c:	490b      	ldr	r1, [pc, #44]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07b      	b.n	800225a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002172:	d009      	beq.n	8002188 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
 800217a:	e005      	b.n	8002188 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe feb6 	bl	8000f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	ea42 0103 	orr.w	r1, r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	f003 0104 	and.w	r1, r3, #4
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f003 0210 	and.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002248:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b088      	sub	sp, #32
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_SPI_Transmit+0x22>
 8002280:	2302      	movs	r3, #2
 8002282:	e126      	b.n	80024d2 <HAL_SPI_Transmit+0x270>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800228c:	f7fe ff3e 	bl	800110c <HAL_GetTick>
 8002290:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d002      	beq.n	80022a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022a6:	e10b      	b.n	80024c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <HAL_SPI_Transmit+0x52>
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022b8:	e102      	b.n	80024c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2203      	movs	r2, #3
 80022be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002300:	d10f      	bne.n	8002322 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002310:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002320:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d007      	beq.n	8002340 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800233e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002348:	d14b      	bne.n	80023e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_SPI_Transmit+0xf6>
 8002352:	8afb      	ldrh	r3, [r7, #22]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d13e      	bne.n	80023d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	881a      	ldrh	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	1c9a      	adds	r2, r3, #2
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800237c:	e02b      	b.n	80023d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b02      	cmp	r3, #2
 800238a:	d112      	bne.n	80023b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	1c9a      	adds	r2, r3, #2
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80023b0:	e011      	b.n	80023d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b2:	f7fe feab 	bl	800110c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d803      	bhi.n	80023ca <HAL_SPI_Transmit+0x168>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d102      	bne.n	80023d0 <HAL_SPI_Transmit+0x16e>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023d4:	e074      	b.n	80024c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ce      	bne.n	800237e <HAL_SPI_Transmit+0x11c>
 80023e0:	e04c      	b.n	800247c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_SPI_Transmit+0x18e>
 80023ea:	8afb      	ldrh	r3, [r7, #22]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d140      	bne.n	8002472 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	330c      	adds	r3, #12
 80023fa:	7812      	ldrb	r2, [r2, #0]
 80023fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002416:	e02c      	b.n	8002472 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d113      	bne.n	800244e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	330c      	adds	r3, #12
 8002430:	7812      	ldrb	r2, [r2, #0]
 8002432:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	86da      	strh	r2, [r3, #54]	; 0x36
 800244c:	e011      	b.n	8002472 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800244e:	f7fe fe5d 	bl	800110c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d803      	bhi.n	8002466 <HAL_SPI_Transmit+0x204>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d102      	bne.n	800246c <HAL_SPI_Transmit+0x20a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002470:	e026      	b.n	80024c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1cd      	bne.n	8002418 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fbcb 	bl	8002c1c <SPI_EndRxTxTransaction>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	77fb      	strb	r3, [r7, #31]
 80024bc:	e000      	b.n	80024c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80024be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b088      	sub	sp, #32
 80024de:	af02      	add	r7, sp, #8
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024f6:	d112      	bne.n	800251e <HAL_SPI_Receive+0x44>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10e      	bne.n	800251e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2204      	movs	r2, #4
 8002504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002508:	88fa      	ldrh	r2, [r7, #6]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f8f1 	bl	80026fc <HAL_SPI_TransmitReceive>
 800251a:	4603      	mov	r3, r0
 800251c:	e0ea      	b.n	80026f4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_SPI_Receive+0x52>
 8002528:	2302      	movs	r3, #2
 800252a:	e0e3      	b.n	80026f4 <HAL_SPI_Receive+0x21a>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002534:	f7fe fdea 	bl	800110c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d002      	beq.n	800254c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002546:	2302      	movs	r3, #2
 8002548:	75fb      	strb	r3, [r7, #23]
    goto error;
 800254a:	e0ca      	b.n	80026e2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_SPI_Receive+0x7e>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800255c:	e0c1      	b.n	80026e2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2204      	movs	r2, #4
 8002562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a4:	d10f      	bne.n	80025c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d007      	beq.n	80025e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d162      	bne.n	80026b2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025ec:	e02e      	b.n	800264c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d115      	bne.n	8002628 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f103 020c 	add.w	r2, r3, #12
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002626:	e011      	b.n	800264c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002628:	f7fe fd70 	bl	800110c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d803      	bhi.n	8002640 <HAL_SPI_Receive+0x166>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d102      	bne.n	8002646 <HAL_SPI_Receive+0x16c>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	75fb      	strb	r3, [r7, #23]
          goto error;
 800264a:	e04a      	b.n	80026e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1cb      	bne.n	80025ee <HAL_SPI_Receive+0x114>
 8002656:	e031      	b.n	80026bc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d113      	bne.n	800268e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	b292      	uxth	r2, r2
 8002672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	1c9a      	adds	r2, r3, #2
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800268c:	e011      	b.n	80026b2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800268e:	f7fe fd3d 	bl	800110c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d803      	bhi.n	80026a6 <HAL_SPI_Receive+0x1cc>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d102      	bne.n	80026ac <HAL_SPI_Receive+0x1d2>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80026b0:	e017      	b.n	80026e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1cd      	bne.n	8002658 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fa45 	bl	8002b50 <SPI_EndRxTransaction>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
 80026de:	e000      	b.n	80026e2 <HAL_SPI_Receive+0x208>
  }

error :
 80026e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	; 0x30
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800270a:	2301      	movs	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_SPI_TransmitReceive+0x26>
 800271e:	2302      	movs	r3, #2
 8002720:	e18a      	b.n	8002a38 <HAL_SPI_TransmitReceive+0x33c>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800272a:	f7fe fcef 	bl	800110c <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002748:	2b01      	cmp	r3, #1
 800274a:	d00f      	beq.n	800276c <HAL_SPI_TransmitReceive+0x70>
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002752:	d107      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x68>
 800275c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002760:	2b04      	cmp	r3, #4
 8002762:	d003      	beq.n	800276c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002764:	2302      	movs	r3, #2
 8002766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800276a:	e15b      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_SPI_TransmitReceive+0x82>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_SPI_TransmitReceive+0x82>
 8002778:	887b      	ldrh	r3, [r7, #2]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002784:	e14e      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b04      	cmp	r3, #4
 8002790:	d003      	beq.n	800279a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2205      	movs	r2, #5
 8002796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d007      	beq.n	80027ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f6:	d178      	bne.n	80028ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <HAL_SPI_TransmitReceive+0x10a>
 8002800:	8b7b      	ldrh	r3, [r7, #26]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d166      	bne.n	80028d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	1c9a      	adds	r2, r3, #2
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282a:	e053      	b.n	80028d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11b      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x176>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d016      	beq.n	8002872 <HAL_SPI_TransmitReceive+0x176>
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d113      	bne.n	8002872 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	881a      	ldrh	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	1c9a      	adds	r2, r3, #2
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d119      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x1b8>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d014      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	b292      	uxth	r2, r2
 8002896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028b0:	2301      	movs	r3, #1
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028b4:	f7fe fc2a 	bl	800110c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d807      	bhi.n	80028d4 <HAL_SPI_TransmitReceive+0x1d8>
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d003      	beq.n	80028d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028d2:	e0a7      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1a6      	bne.n	800282c <HAL_SPI_TransmitReceive+0x130>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1a1      	bne.n	800282c <HAL_SPI_TransmitReceive+0x130>
 80028e8:	e07c      	b.n	80029e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x1fc>
 80028f2:	8b7b      	ldrh	r3, [r7, #26]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d16b      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800291e:	e057      	b.n	80029d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	d11c      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x26c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x26c>
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d114      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d119      	bne.n	80029aa <HAL_SPI_TransmitReceive+0x2ae>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d014      	beq.n	80029aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a6:	2301      	movs	r3, #1
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029aa:	f7fe fbaf 	bl	800110c <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d803      	bhi.n	80029c2 <HAL_SPI_TransmitReceive+0x2c6>
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c0:	d102      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x2cc>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029ce:	e029      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1a2      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x224>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d19d      	bne.n	8002920 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f917 	bl	8002c1c <SPI_EndRxTxTransaction>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a00:	e010      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10b      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	e000      	b.n	8002a24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002a22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	; 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a50:	f7fe fb5c 	bl	800110c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a60:	f7fe fb54 	bl	800110c <HAL_GetTick>
 8002a64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a66:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	015b      	lsls	r3, r3, #5
 8002a6c:	0d1b      	lsrs	r3, r3, #20
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a76:	e054      	b.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7e:	d050      	beq.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a80:	f7fe fb44 	bl	800110c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d902      	bls.n	8002a96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d13d      	bne.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002aa4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aae:	d111      	bne.n	8002ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab8:	d004      	beq.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac2:	d107      	bne.n	8002ad4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002adc:	d10f      	bne.n	8002afe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002afc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e017      	b.n	8002b42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d19b      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000

08002b50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b64:	d111      	bne.n	8002b8a <SPI_EndRxTransaction+0x3a>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6e:	d004      	beq.n	8002b7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b78:	d107      	bne.n	8002b8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b92:	d12a      	bne.n	8002bea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9c:	d012      	beq.n	8002bc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff ff49 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d02d      	beq.n	8002c10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e026      	b.n	8002c12 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2101      	movs	r1, #1
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff ff36 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01a      	beq.n	8002c10 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e013      	b.n	8002c12 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff ff23 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e000      	b.n	8002c12 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <SPI_EndRxTxTransaction+0x7c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <SPI_EndRxTxTransaction+0x80>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	0d5b      	lsrs	r3, r3, #21
 8002c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c46:	d112      	bne.n	8002c6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff fef4 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e00f      	b.n	8002c8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d0f2      	beq.n	8002c6e <SPI_EndRxTxTransaction+0x52>
 8002c88:	e000      	b.n	8002c8c <SPI_EndRxTxTransaction+0x70>
        break;
 8002c8a:	bf00      	nop
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	165e9f81 	.word	0x165e9f81

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	2600      	movs	r6, #0
 8002ca4:	4d0c      	ldr	r5, [pc, #48]	; (8002cd8 <__libc_init_array+0x38>)
 8002ca6:	4c0d      	ldr	r4, [pc, #52]	; (8002cdc <__libc_init_array+0x3c>)
 8002ca8:	1b64      	subs	r4, r4, r5
 8002caa:	10a4      	asrs	r4, r4, #2
 8002cac:	42a6      	cmp	r6, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	f000 f822 	bl	8002cf8 <_init>
 8002cb4:	2600      	movs	r6, #0
 8002cb6:	4d0a      	ldr	r5, [pc, #40]	; (8002ce0 <__libc_init_array+0x40>)
 8002cb8:	4c0a      	ldr	r4, [pc, #40]	; (8002ce4 <__libc_init_array+0x44>)
 8002cba:	1b64      	subs	r4, r4, r5
 8002cbc:	10a4      	asrs	r4, r4, #2
 8002cbe:	42a6      	cmp	r6, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc8:	4798      	blx	r3
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd2:	4798      	blx	r3
 8002cd4:	3601      	adds	r6, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08002d3c 	.word	0x08002d3c
 8002cdc:	08002d3c 	.word	0x08002d3c
 8002ce0:	08002d3c 	.word	0x08002d3c
 8002ce4:	08002d40 	.word	0x08002d40

08002ce8 <memset>:
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4402      	add	r2, r0
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <memset+0xa>
 8002cf0:	4770      	bx	lr
 8002cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf6:	e7f9      	b.n	8002cec <memset+0x4>

08002cf8 <_init>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	bf00      	nop
 8002cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfe:	bc08      	pop	{r3}
 8002d00:	469e      	mov	lr, r3
 8002d02:	4770      	bx	lr

08002d04 <_fini>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr
